<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L496AGIx\STM32L496AGIx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L496AGIx\STM32L496AGIx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Feb 21 22:11:55 2024
<BR><P>
<H3>Maximum Stack Usage =       3216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
wifi_cmd_task &rArr; getc &rArr; fgetc &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[43b]">cpu_intrpt_save</a>
 <LI><a href="#[43c]">cpu_intrpt_restore</a>
 <LI><a href="#[508]">cpu_first_task_start</a>
 <LI><a href="#[44f]">cpu_task_switch</a>
 <LI><a href="#[4f7]">cpu_intrpt_switch</a>
 <LI><a href="#[18]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[14]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BusFault_Handler</a><BR>
 <LI><a href="#[2c3]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c3]">_Error_Handler</a><BR>
 <LI><a href="#[223]">_Alloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[227]">_InitOnce</a><BR>
 <LI><a href="#[3cf]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3cf]">_Findy1</a><BR>
 <LI><a href="#[3d1]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d1]">_Findx1</a><BR>
 <LI><a href="#[3d0]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d0]">_Findx0</a><BR>
 <LI><a href="#[3b2]">WM_SendToParent</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3af]">WM__SendMessage</a><BR>
 <LI><a href="#[3b7]">WM__InvalidateRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b7]">WM__InvalidateRect</a><BR>
 <LI><a href="#[3c6]">WM_InvalidateWindowAndDescsEx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c6]">WM_InvalidateWindowAndDescsEx</a><BR>
 <LI><a href="#[3c1]">WM__InvalidateDrawAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c1]">WM__InvalidateDrawAndDescs</a><BR>
 <LI><a href="#[3d3]">_MoveDescendents</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d3]">_MoveDescendents</a><BR>
 <LI><a href="#[3ca]">WM__UpdateChildPositions</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c9]">WM_ResizeWindow</a><BR>
 <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[13]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">UsageFault_Handler</a><BR>
 <LI><a href="#[3b6]">_DeleteAllChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b3]">WM_DeleteWindow</a><BR>
 <LI><a href="#[3d4]">_PaintTransChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d4]">_PaintTransChildren</a><BR>
 <LI><a href="#[3c5]">WM_InvalidateWindowAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c5]">WM_InvalidateWindowAndDescs</a><BR>
 <LI><a href="#[3bd]">_GetDialogItem</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3bd]">_GetDialogItem</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC1_2_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[49]">ADC3_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[2e]">CAN1_RX0_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[2f]">CAN1_RX1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[30]">CAN1_SCE_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[2d]">CAN1_TX_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[70]">CAN2_RX0_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[71]">CAN2_RX1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[72]">CAN2_SCE_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[6f]">CAN2_TX_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[5a]">COMP_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[6b]">CRS_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[8b]">DCMI_DMAError</a> from stm32l4xx_hal_dcmi.o(i.DCMI_DMAError) referenced from stm32l4xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler)
 <LI><a href="#[8b]">DCMI_DMAError</a> from stm32l4xx_hal_dcmi.o(i.DCMI_DMAError) referenced from stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
 <LI><a href="#[8d]">DCMI_DMAHalfXferCplt</a> from stm32l4xx_hal_dcmi.o(i.DCMI_DMAHalfXferCplt) referenced from stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
 <LI><a href="#[8c]">DCMI_DMAXferCplt</a> from stm32l4xx_hal_dcmi.o(i.DCMI_DMAXferCplt) referenced from stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
 <LI><a href="#[6e]">DCMI_IRQHandler</a> from stm32l4xx_it.o(i.DCMI_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[57]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[58]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[59]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[44]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[25]">DMA1_Channel1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[26]">DMA1_Channel2_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[27]">DMA1_Channel3_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[28]">DMA1_Channel4_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[29]">DMA1_Channel5_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel6_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[73]">DMA2D_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[52]">DMA2_Channel1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[53]">DMA2_Channel2_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[54]">DMA2_Channel3_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[55]">DMA2_Channel4_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[56]">DMA2_Channel5_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel6_IRQHandler</a> from stm32l4xx_it.o(i.DMA2_Channel6_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel7_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[42]">EXTI15_10_IRQHandler</a> from stm32l4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[31]">EXTI9_5_IRQHandler</a> from stm32l4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[1e]">FLASH_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[4a]">FMC_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[9d]">GUIDRV_FlexColor_SetFunc66709</a> from guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709) referenced from lcdconf_flexcolor_template.o(i.LCD_X_Config)
 <LI><a href="#[9c]">GUIDRV_FlexColor_SetMode16bppC0B8</a> from guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8) referenced from lcdconf_flexcolor_template.o(i.LCD_X_Config)
 <LI><a href="#[80]">GUIDRV_FlexColor__GetPixelIndexNoCache</a> from guidrv_flexcolor.o(i.GUIDRV_FlexColor__GetPixelIndexNoCache) referenced from guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
 <LI><a href="#[84]">GUIDRV_FlexColor__SetLog2Phys</a> from guidrv_flexcolor.o(i.GUIDRV_FlexColor__SetLog2Phys) referenced from guidrv_flexcolor.o(i.GUIDRV_FlexColor__InitOnce)
 <LI><a href="#[81]">GUIDRV_FlexColor__SetPixelIndexNoCache</a> from guidrv_flexcolor.o(i.GUIDRV_FlexColor__SetPixelIndexNoCache) referenced from guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
 <LI><a href="#[15e]">GUIMONO_DispChar</a> from gui_charm.o(i.GUIMONO_DispChar) referenced from f6x8.o(.constdata)
 <LI><a href="#[15f]">GUIMONO_GetCharDistX</a> from gui_charm.o(i.GUIMONO_GetCharDistX) referenced from f6x8.o(.constdata)
 <LI><a href="#[160]">GUIMONO_GetFontInfo</a> from gui_charm.o(i.GUIMONO_GetFontInfo) referenced from f6x8.o(.constdata)
 <LI><a href="#[161]">GUIMONO_IsInFont</a> from gui_charm.o(i.GUIMONO_IsInFont) referenced from f6x8.o(.constdata)
 <LI><a href="#[162]">GUIPROP_DispChar</a> from gui_charp.o(i.GUIPROP_DispChar) referenced 2 times from f20_ascii.o(.constdata)
 <LI><a href="#[163]">GUIPROP_GetCharDistX</a> from gui_charp.o(i.GUIPROP_GetCharDistX) referenced 2 times from f20_ascii.o(.constdata)
 <LI><a href="#[164]">GUIPROP_GetFontInfo</a> from gui_charp.o(i.GUIPROP_GetFontInfo) referenced 2 times from f20_ascii.o(.constdata)
 <LI><a href="#[165]">GUIPROP_IsInFont</a> from gui_charp.o(i.GUIPROP_IsInFont) referenced 2 times from f20_ascii.o(.constdata)
 <LI><a href="#[a2]">GUI_MEMDEV_Paint1Static</a> from guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static) referenced from wm.o(i.WM__PaintWinAndOverlays)
 <LI><a href="#[a2]">GUI_MEMDEV_Paint1Static</a> from guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static) referenced from wm.o(i._PaintTransChildren)
 <LI><a href="#[ab]">GUI_MEMDEV__WriteToActiveAlpha</a> from guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha) referenced from guidev_32.o(i._GetDevFunc)
 <LI><a href="#[aa]">GUI_MEMDEV__WriteToActiveOpaque</a> from guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque) referenced from guidev_16.o(i._GetDevFunc)
 <LI><a href="#[17e]">GUI_USAGE_BM_AddHLine</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[17d]">GUI_USAGE_BM_AddPixel</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[17f]">GUI_USAGE_BM_Clear</a> from guidev_usagebm.o(i.GUI_USAGE_BM_Clear) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[181]">GUI_USAGE_BM_GetNextDirty</a> from guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[e]">GUI_X_ExecIdle</a> from gui_x_rhino.o(i.GUI_X_ExecIdle) referenced 2 times from gui_waitevent.o(.data)
 <LI><a href="#[9]">GUI__MixColors</a> from gui__alpha.o(i.GUI__MixColors) referenced 2 times from gui__alpha.o(.data)
 <LI><a href="#[a]">GUI__MixColorsBulk</a> from gui__alpha.o(i.GUI__MixColorsBulk) referenced 2 times from gui__alpha.o(.data)
 <LI><a href="#[12]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[3a]">I2C1_ER_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[39]">I2C1_EV_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[3c]">I2C2_ER_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[3b]">I2C2_EV_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[63]">I2C3_ER_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[62]">I2C3_EV_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[6d]">I2C4_ER_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[6c]">I2C4_EV_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[f]">LCD_AA_MixColors16</a> from lcd_aa.o(i.LCD_AA_MixColors16) referenced 2 times from lcd_aa.o(.data)
 <LI><a href="#[13b]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from gui_core.o(.constdata)
 <LI><a href="#[13c]">LCD_DrawPixel</a> from lcd.o(i.LCD_DrawPixel) referenced from gui_core.o(.constdata)
 <LI><a href="#[6]">LCD_GetpPalConvTableBM</a> from lcd_color.o(i.LCD_GetpPalConvTableBM) referenced 2 times from gui_core.o(.data)
 <LI><a href="#[68]">LCD_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[89]">LCD_Index2Color_888</a> from guicc_888_index2color.o(i.LCD_Index2Color_888) referenced from gui__alpha.o(i.GUI__DoAlphaBlending)
 <LI><a href="#[87]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(i.LCD_Index2Color_8888) referenced from guicc_8888.o(.constdata)
 <LI><a href="#[87]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(i.LCD_Index2Color_8888) referenced from guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha)
 <LI><a href="#[87]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(i.LCD_Index2Color_8888) referenced from gui__alpha.o(i.GUI__DoAlphaBlending)
 <LI><a href="#[13e]">LCD_Index2Color_M565</a> from guicc_m565.o(i.LCD_Index2Color_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[5b]">LPTIM1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[5c]">LPTIM2_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[60]">LPUART1_IRQHandler</a> from stm32l4xx_it.o(i.LPUART1_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[9b]">LcdReadDataMultiple</a> from lcdconf_flexcolor_template.o(i.LcdReadDataMultiple) referenced from lcdconf_flexcolor_template.o(i.LCD_X_Config)
 <LI><a href="#[99]">LcdWriteData</a> from lcdconf_flexcolor_template.o(i.LcdWriteData) referenced from lcdconf_flexcolor_template.o(i.LCD_X_Config)
 <LI><a href="#[9a]">LcdWriteDataMultiple</a> from lcdconf_flexcolor_template.o(i.LcdWriteDataMultiple) referenced from lcdconf_flexcolor_template.o(i.LCD_X_Config)
 <LI><a href="#[98]">LcdWriteReg</a> from lcdconf_flexcolor_template.o(i.LcdWriteReg) referenced from lcdconf_flexcolor_template.o(i.LCD_X_Config)
 <LI><a href="#[13]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[5d]">OTG_FS_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[1b]">PVD_PVM_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from port_c_1.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[61]">QUADSPI_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[1f]">RCC_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[69]">RNG_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[43]">RTC_Alarm_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[1d]">RTC_WKUP_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[64]">SAI1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[65]">SAI2_IRQHandler</a> from stm32l4xx_it.o(i.SAI2_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[8e]">SAI_DMAAbort</a> from stm32l4xx_hal_sai.o(i.SAI_DMAAbort) referenced from stm32l4xx_hal_sai.o(i.HAL_SAI_IRQHandler)
 <LI><a href="#[4b]">SDMMC1_IRQHandler</a> from stm32l4xx_it.o(i.SDMMC1_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[90]">SD_DMARxAbort</a> from stm32l4xx_hal_sd.o(i.SD_DMARxAbort) referenced from stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[8f]">SD_DMATxAbort</a> from stm32l4xx_hal_sd.o(i.SD_DMATxAbort) referenced from stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[91]">SMARTCARD_DMAAbortOnError</a> from stm32l4xx_hal_smartcard.o(i.SMARTCARD_DMAAbortOnError) referenced from stm32l4xx_hal_smartcard.o(i.HAL_SMARTCARD_IRQHandler)
 <LI><a href="#[3d]">SPI1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[4d]">SPI3_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[66]">SWPMI1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[75]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l496xx_keil.o(.text)
 <LI><a href="#[1c]">TAMP_STAMP_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[32]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[35]">TIM1_CC_IRQHandler</a> from stm32l4xx_it.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[34]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[33]">TIM1_UP_TIM16_IRQHandler</a> from stm32l4xx_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[36]">TIM2_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[37]">TIM3_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[38]">TIM4_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[4c]">TIM5_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[50]">TIM6_DAC_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[51]">TIM7_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[45]">TIM8_BRK_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[48]">TIM8_CC_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[47]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[46]">TIM8_UP_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[67]">TSC_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[4e]">UART4_IRQHandler</a> from stm32l4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[4f]">UART5_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[92]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[94]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT_Buf_Queue_1byte)
 <LI><a href="#[93]">UART_RxISR_8BIT_Buf_Queue</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT_Buf_Queue) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT_Buf_Queue_1byte)
 <LI><a href="#[96]">UART_TxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[95]">UART_TxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[3f]">USART1_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[40]">USART2_IRQHandler</a> from stm32l4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[41]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[a1]">WM__Paint1</a> from wm.o(i.WM__Paint1) referenced from wm.o(i.WM__PaintWinAndOverlays)
 <LI><a href="#[a1]">WM__Paint1</a> from wm.o(i.WM__Paint1) referenced from wm.o(i._PaintTransChildren)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from startup_stm32l496xx_keil.o(.text) referenced from startup_stm32l496xx_keil.o(RESET)
 <LI><a href="#[168]">_CalcSizeOfChar</a> from gui_uc_encodenone.o(i._CalcSizeOfChar) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[140]">_Color2IndexBulk</a> from guicc_m565.o(i._Color2IndexBulk) referenced 2 times from guicc_m565.o(.constdata)
 <LI><a href="#[182]">_Color2Index_0</a> from guicc_0.o(i._Color2Index_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[16a]">_Color2Index_8888</a> from guicc_8888.o(i._Color2Index_8888) referenced from guicc_8888.o(.constdata)
 <LI><a href="#[13d]">_Color2Index_M565</a> from guicc_m565.o(i._Color2Index_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[142]">_DrawBitmap</a> from guidrv_flexcolor.o(i._DrawBitmap) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[7e]">_DrawBitmap</a> from guidrv_flexcolor_16bpp_c0b8.o(i._DrawBitmap) referenced from guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
 <LI><a href="#[77]">_DrawBkSimple</a> from guidemo.o(i._DrawBkSimple) referenced from guidemo.o(i.GUIDEMO_Main)
 <LI><a href="#[143]">_DrawHLine</a> from guidrv_flexcolor.o(i._DrawHLine) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[144]">_DrawVLine</a> from guidrv_flexcolor.o(i._DrawVLine) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[169]">_Encode</a> from gui_uc_encodenone.o(i._Encode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[145]">_FillRect</a> from guidrv_flexcolor.o(i._FillRect) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[7f]">_FillRect</a> from guidrv_flexcolor_16bpp_c0b8.o(i._FillRect) referenced from guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
 <LI><a href="#[180]">_GUI_USAGE_BM_Delete</a> from guidev_usagebm.o(i._GUI_USAGE_BM_Delete) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[166]">_GetCharCode</a> from gui_uc_encodenone.o(i._GetCharCode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[167]">_GetCharSize</a> from gui_uc_encodenone.o(i._GetCharSize) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[14c]">_GetDevData</a> from guidrv_flexcolor.o(i._GetDevData) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[14a]">_GetDevFunc</a> from guidrv_flexcolor.o(i._GetDevFunc) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[a6]">_GetDevFunc_Init</a> from guidrv_flexcolor.o(i._GetDevFunc_Init) referenced from guidrv_flexcolor.o(i._GetDevFunc)
 <LI><a href="#[a7]">_GetDevFunc_Off</a> from guidrv_flexcolor.o(i._GetDevFunc_Off) referenced from guidrv_flexcolor.o(i._GetDevFunc)
 <LI><a href="#[a3]">_GetDevFunc_On</a> from guidrv_flexcolor.o(i._GetDevFunc_On) referenced from guidrv_flexcolor.o(i._GetDevFunc)
 <LI><a href="#[ac]">_GetDevFunc_SetRect</a> from guidrv_flexcolor.o(i._GetDevFunc_SetRect) referenced from guidrv_flexcolor.o(i._GetDevFunc_SetRectOutside)
 <LI><a href="#[a9]">_GetDevFunc_SetRectOutside</a> from guidrv_flexcolor.o(i._GetDevFunc_SetRectOutside) referenced from guidrv_flexcolor.o(i._GetDevFunc)
 <LI><a href="#[a4]">_GetDevFunc_SetSize</a> from guidrv_flexcolor.o(i._GetDevFunc_SetSize) referenced from guidrv_flexcolor.o(i._GetDevFunc)
 <LI><a href="#[a5]">_GetDevFunc_SetVSize</a> from guidrv_flexcolor.o(i._GetDevFunc_SetVSize) referenced from guidrv_flexcolor.o(i._GetDevFunc)
 <LI><a href="#[14b]">_GetDevProp</a> from guidrv_flexcolor.o(i._GetDevProp) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[184]">_GetIndexMask_0</a> from guicc_0.o(i._GetIndexMask_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[16b]">_GetIndexMask_8888</a> from guicc_8888.o(i._GetIndexMask_8888) referenced from guicc_8888.o(.constdata)
 <LI><a href="#[13f]">_GetIndexMask_M565</a> from guicc_m565.o(i._GetIndexMask_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[146]">_GetPixelIndex</a> from guidrv_flexcolor.o(i._GetPixelIndex) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[14d]">_GetRect</a> from guidrv_flexcolor.o(i._GetRect) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[141]">_Index2ColorBulk</a> from guicc_m565.o(i._Index2ColorBulk) referenced 2 times from guicc_m565.o(.constdata)
 <LI><a href="#[183]">_Index2Color_0</a> from guicc_0.o(i._Index2Color_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[14e]">_Log2PhysX_X0Y0S0</a> from guidrv_flexcolor.o(i._Log2PhysX_X0Y0S0) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[152]">_Log2PhysX_X0Y0S1</a> from guidrv_flexcolor.o(i._Log2PhysX_X0Y0S1) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[150]">_Log2PhysX_X0Y1S0</a> from guidrv_flexcolor.o(i._Log2PhysX_X0Y1S0) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[154]">_Log2PhysX_X0Y1S1</a> from guidrv_flexcolor.o(i._Log2PhysX_X0Y1S1) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[14f]">_Log2PhysX_X1Y0S0</a> from guidrv_flexcolor.o(i._Log2PhysX_X1Y0S0) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[153]">_Log2PhysX_X1Y0S1</a> from guidrv_flexcolor.o(i._Log2PhysX_X1Y0S1) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[151]">_Log2PhysX_X1Y1S0</a> from guidrv_flexcolor.o(i._Log2PhysX_X1Y1S0) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[155]">_Log2PhysX_X1Y1S1</a> from guidrv_flexcolor.o(i._Log2PhysX_X1Y1S1) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[156]">_Log2PhysY_X0Y0S0</a> from guidrv_flexcolor.o(i._Log2PhysY_X0Y0S0) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[15a]">_Log2PhysY_X0Y0S1</a> from guidrv_flexcolor.o(i._Log2PhysY_X0Y0S1) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[158]">_Log2PhysY_X0Y1S0</a> from guidrv_flexcolor.o(i._Log2PhysY_X0Y1S0) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[15c]">_Log2PhysY_X0Y1S1</a> from guidrv_flexcolor.o(i._Log2PhysY_X0Y1S1) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[157]">_Log2PhysY_X1Y0S0</a> from guidrv_flexcolor.o(i._Log2PhysY_X1Y0S0) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[15b]">_Log2PhysY_X1Y0S1</a> from guidrv_flexcolor.o(i._Log2PhysY_X1Y0S1) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[159]">_Log2PhysY_X1Y1S0</a> from guidrv_flexcolor.o(i._Log2PhysY_X1Y1S0) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[15d]">_Log2PhysY_X1Y1S1</a> from guidrv_flexcolor.o(i._Log2PhysY_X1Y1S1) referenced from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[d]">_Log2VisBuffered</a> from gui_charline.o(i._Log2VisBuffered) referenced 2 times from gui_charline.o(.data)
 <LI><a href="#[85]">_OnExit</a> from gui_task.o(i._OnExit) referenced from gui_task.o(i.GUITASK_Init)
 <LI><a href="#[86]">_OnExit</a> from gui_core.o(i._OnExit) referenced from gui_core.o(i.GUI_Init)
 <LI><a href="#[88]">_OnExit</a> from gui_multibuf.o(i._OnExit) referenced from gui_multibuf.o(i.GUI_MULTIBUF_Config)
 <LI><a href="#[8a]">_OnExit</a> from gui__alpha.o(i._OnExit) referenced from gui__alpha.o(i.GUI__GetAlphaBuffer)
 <LI><a href="#[97]">_OnExit</a> from lcd_color.o(i._OnExit) referenced from lcd_color.o(i.LCD_InitColors)
 <LI><a href="#[a0]">_OnExit</a> from wm.o(i._OnExit) referenced from wm.o(i.WM_Init)
 <LI><a href="#[82]">_ReadData</a> from guidrv_flexcolor_16bpp_c0b8.o(i._ReadData) referenced from guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
 <LI><a href="#[af]">_ReadPixelCust_16bpp</a> from guidrv_flexcolor.o(i._ReadPixelCust_16bpp) referenced from guidrv_flexcolor.o(i._SetDevFunc)
 <LI><a href="#[ae]">_ReadPixelCust_18bpp</a> from guidrv_flexcolor.o(i._ReadPixelCust_18bpp) referenced from guidrv_flexcolor.o(i._SetDevFunc)
 <LI><a href="#[7]">_ReadPixel_16bpp_B16_I</a> from guidrv_flexcolor_func66709.o(i._ReadPixel_16bpp_B16_I) referenced 2 times from guidrv_flexcolor_func66709.o(.data)
 <LI><a href="#[7b]">_ReadPixel_16bpp_B8</a> from guidrv_flexcolor_func66709.o(i._ReadPixel_16bpp_B8) referenced from guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
 <LI><a href="#[b0]">_ReadRectCust_16bpp</a> from guidrv_flexcolor.o(i._ReadRectCust_16bpp) referenced from guidrv_flexcolor.o(i._SetDevFunc)
 <LI><a href="#[ad]">_ReadRectCust_18bpp</a> from guidrv_flexcolor.o(i._ReadRectCust_18bpp) referenced from guidrv_flexcolor.o(i._SetDevFunc)
 <LI><a href="#[8]">_ReadRect_16bpp_B16_I</a> from guidrv_flexcolor_func66709.o(i._ReadRect_16bpp_B16_I) referenced 2 times from guidrv_flexcolor_func66709.o(.data)
 <LI><a href="#[7c]">_ReadRect_16bpp_B8</a> from guidrv_flexcolor_func66709.o(i._ReadRect_16bpp_B8) referenced from guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
 <LI><a href="#[16f]">_SetBkColor</a> from lcd.o(i._SetBkColor) referenced from lcd.o(.constdata)
 <LI><a href="#[16e]">_SetColor</a> from lcd.o(i._SetColor) referenced from lcd.o(.constdata)
 <LI><a href="#[a8]">_SetDevFunc</a> from guidrv_flexcolor.o(i._SetDevFunc) referenced from guidrv_flexcolor.o(i._GetDevFunc)
 <LI><a href="#[170]">_SetDrawMode</a> from lcd.o(i._SetDrawMode) referenced from lcd.o(.constdata)
 <LI><a href="#[7d]">_SetInterface</a> from guidrv_flexcolor_func66709.o(i._SetInterface) referenced from guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
 <LI><a href="#[149]">_SetOrg</a> from guidrv_flexcolor.o(i._SetOrg) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[7a]">_SetOrientation</a> from guidrv_flexcolor_func66709.o(i._SetOrientation) referenced from guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
 <LI><a href="#[78]">_SetPhysRAMAddr</a> from guidrv_flexcolor_func66709.o(i._SetPhysRAMAddr) referenced from guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
 <LI><a href="#[147]">_SetPixelIndex</a> from guidrv_flexcolor.o(i._SetPixelIndex) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[79]">_SetRect</a> from guidrv_flexcolor_func66709.o(i._SetRect) referenced from guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
 <LI><a href="#[b1]">_SetReg_B16</a> from guidrv_flexcolor_func66709.o(i._SetReg_B16) referenced from guidrv_flexcolor_func66709.o(i._SetInterface)
 <LI><a href="#[b3]">_SetReg_B8</a> from guidrv_flexcolor_func66709.o(i._SetReg_B8) referenced from guidrv_flexcolor_func66709.o(i._SetInterface)
 <LI><a href="#[83]">_WriteData</a> from guidrv_flexcolor_16bpp_c0b8.o(i._WriteData) referenced from guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
 <LI><a href="#[b2]">_WritePara_B16</a> from guidrv_flexcolor_func66709.o(i._WritePara_B16) referenced from guidrv_flexcolor_func66709.o(i._SetInterface)
 <LI><a href="#[b4]">_WritePara_B8</a> from guidrv_flexcolor_func66709.o(i._WritePara_B8) referenced from guidrv_flexcolor_func66709.o(i._SetInterface)
 <LI><a href="#[148]">_XorPixel</a> from guidrv_flexcolor.o(i._XorPixel) referenced 3 times from guidrv_flexcolor.o(.constdata)
 <LI><a href="#[76]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l496xx_keil.o(.text)
 <LI><a href="#[9f]">_cbBackWin</a> from wm.o(i._cbBackWin) referenced from wm.o(i.WM_Init)
 <LI><a href="#[9e]">_cbPaintMemDev</a> from wm.o(i._cbPaintMemDev) referenced from wm.o(i.WM_Exec)
 <LI><a href="#[b6]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[b7]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[b8]">abs_data_timer_process</a> from abs_data_model.o(i.abs_data_timer_process) referenced from abs_data_model.o(i.abs_data_model_init)
 <LI><a href="#[121]">at_cip_recv_cfg_func</a> from atdemo.o(i.at_cip_recv_cfg_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[11f]">at_cip_send_raw_func</a> from atdemo.o(i.at_cip_send_raw_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[122]">at_fota_start_func</a> from atdemo.o(i.at_fota_start_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[118]">at_get_ap_current_status_func</a> from atdemo.o(i.at_get_ap_current_status_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[f9]">at_get_at_verion</a> from atdemo.o(i.at_get_at_verion) referenced from atdemo.o(.constdata)
 <LI><a href="#[fa]">at_get_at_verion_old</a> from atdemo.o(i.at_get_at_verion_old) referenced from atdemo.o(.constdata)
 <LI><a href="#[11e]">at_get_sta_current_status_func</a> from atdemo.o(i.at_get_sta_current_status_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[fe]">at_reboot_func</a> from atdemo.o(i.at_reboot_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[ff]">at_recover_factory_func</a> from atdemo.o(i.at_recover_factory_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[120]">at_refer_cip_recv_cfg_func</a> from atdemo.o(i.at_refer_cip_recv_cfg_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[100]">at_refer_flash_lock_func</a> from atdemo.o(i.at_refer_flash_lock_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[10a]">at_refer_uart_echo_func</a> from atdemo.o(i.at_refer_uart_echo_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[108]">at_refer_uart_fomat_func</a> from atdemo.o(i.at_refer_uart_fomat_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[106]">at_refer_uart_info_func</a> from atdemo.o(i.at_refer_uart_info_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[115]">at_refer_wifi_ap_info_func</a> from atdemo.o(i.at_refer_wifi_ap_info_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[113]">at_refer_wifi_ap_ip_mask_gate_func</a> from atdemo.o(i.at_refer_wifi_ap_ip_mask_gate_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[111]">at_refer_wifi_dhcp_func</a> from atdemo.o(i.at_refer_wifi_dhcp_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[102]">at_refer_wifi_event_notification_func</a> from atdemo.o(i.at_refer_wifi_event_notification_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[104]">at_refer_wifi_power_save_func</a> from atdemo.o(i.at_refer_wifi_power_save_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[10e]">at_refer_wifi_scan_option_func</a> from atdemo.o(i.at_refer_wifi_scan_option_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[11b]">at_refer_wifi_sta_info_func</a> from atdemo.o(i.at_refer_wifi_sta_info_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[119]">at_refer_wifi_sta_ip_mask_gate_dns_func</a> from atdemo.o(i.at_refer_wifi_sta_ip_mask_gate_dns_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[101]">at_set_flash_lock_func</a> from atdemo.o(i.at_set_flash_lock_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[10b]">at_set_uart_echo_func</a> from atdemo.o(i.at_set_uart_echo_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[109]">at_set_uart_fomat_func</a> from atdemo.o(i.at_set_uart_fomat_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[107]">at_set_uart_info_func</a> from atdemo.o(i.at_set_uart_info_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[116]">at_set_wifi_ap_info_start_func</a> from atdemo.o(i.at_set_wifi_ap_info_start_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[114]">at_set_wifi_ap_ip_mask_gate_func</a> from atdemo.o(i.at_set_wifi_ap_ip_mask_gate_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[112]">at_set_wifi_dhcp_func</a> from atdemo.o(i.at_set_wifi_dhcp_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[103]">at_set_wifi_event_notification_func</a> from atdemo.o(i.at_set_wifi_event_notification_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[105]">at_set_wifi_power_save_func</a> from atdemo.o(i.at_set_wifi_power_save_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[10f]">at_set_wifi_scan_option_func</a> from atdemo.o(i.at_set_wifi_scan_option_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[11c]">at_set_wifi_sta_info_start_func</a> from atdemo.o(i.at_set_wifi_sta_info_start_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[11a]">at_set_wifi_sta_ip_mask_gate_dns_func</a> from atdemo.o(i.at_set_wifi_sta_ip_mask_gate_dns_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[fd]">at_system_memory_free_func</a> from atdemo.o(i.at_system_memory_free_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[fc]">at_system_run_time_func</a> from atdemo.o(i.at_system_run_time_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[f7]">at_test</a> from atdemo.o(i.at_test) referenced from atdemo.o(.constdata)
 <LI><a href="#[fb]">at_version</a> from atdemo.o(i.at_version) referenced from atdemo.o(.constdata)
 <LI><a href="#[117]">at_wifi_ap_quit_func</a> from atdemo.o(i.at_wifi_ap_quit_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[10c]">at_wifi_firmware_version_func</a> from atdemo.o(i.at_wifi_firmware_version_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[11d]">at_wifi_sta_quit_func</a> from atdemo.o(i.at_wifi_sta_quit_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[10d]">at_wl_mac_func</a> from atdemo.o(i.at_wl_mac_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[110]">at_wl_scan_func</a> from atdemo.o(i.at_wl_scan_func) referenced from atdemo.o(.constdata)
 <LI><a href="#[ba]">cali_example_process_cb</a> from calibrated_example_algo.o(i.cali_example_process_cb) referenced from calibrated_example_algo.o(i.cali_example_example_init)
 <LI><a href="#[f4]">daemon_task</a> from main_1.o(i.daemon_task) referenced from main_1.o(i.main)
 <LI><a href="#[f2]">demo_task</a> from main_1.o(i.demo_task) referenced from main_1.o(i.main)
 <LI><a href="#[bf]">drv_acc_st_lsm6dsl_close</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_close) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
 <LI><a href="#[c2]">drv_acc_st_lsm6dsl_ioctl</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_ioctl) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
 <LI><a href="#[c3]">drv_acc_st_lsm6dsl_irq_handle</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_irq_handle) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
 <LI><a href="#[be]">drv_acc_st_lsm6dsl_open</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_open) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
 <LI><a href="#[c0]">drv_acc_st_lsm6dsl_read</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_read) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
 <LI><a href="#[c1]">drv_acc_st_lsm6dsl_write</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_write) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
 <LI><a href="#[c5]">drv_als_liteon_ltr553_close</a> from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_close) referenced from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
 <LI><a href="#[c8]">drv_als_liteon_ltr553_ioctl</a> from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_ioctl) referenced from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
 <LI><a href="#[c9]">drv_als_liteon_ltr553_irq_handle</a> from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_irq_handle) referenced from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
 <LI><a href="#[c4]">drv_als_liteon_ltr553_open</a> from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_open) referenced from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
 <LI><a href="#[c6]">drv_als_liteon_ltr553_read</a> from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_read) referenced from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
 <LI><a href="#[c7]">drv_als_liteon_ltr553_write</a> from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_write) referenced from drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
 <LI><a href="#[cb]">drv_baro_bosch_bmp280_close</a> from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_close) referenced from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
 <LI><a href="#[ce]">drv_baro_bosch_bmp280_ioctl</a> from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_ioctl) referenced from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
 <LI><a href="#[cf]">drv_baro_bosch_bmp280_irq_handle</a> from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_irq_handle) referenced from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
 <LI><a href="#[ca]">drv_baro_bosch_bmp280_open</a> from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_open) referenced from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
 <LI><a href="#[cc]">drv_baro_bosch_bmp280_read</a> from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_read) referenced from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
 <LI><a href="#[cd]">drv_baro_bosch_bmp280_write</a> from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_write) referenced from drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
 <LI><a href="#[d1]">drv_gyro_st_lsm6dsl_close</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_close) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
 <LI><a href="#[d4]">drv_gyro_st_lsm6dsl_ioctl</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_ioctl) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
 <LI><a href="#[d5]">drv_gyro_st_lsm6dsl_irq_handle</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_irq_handle) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
 <LI><a href="#[d0]">drv_gyro_st_lsm6dsl_open</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_open) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
 <LI><a href="#[d2]">drv_gyro_st_lsm6dsl_read</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_read) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
 <LI><a href="#[d3]">drv_gyro_st_lsm6dsl_write</a> from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_write) referenced from drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
 <LI><a href="#[d7]">drv_humi_sensirion_shtc1_close</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_close) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
 <LI><a href="#[da]">drv_humi_sensirion_shtc1_ioctl</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_ioctl) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
 <LI><a href="#[db]">drv_humi_sensirion_shtc1_irq_handle</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_irq_handle) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
 <LI><a href="#[d6]">drv_humi_sensirion_shtc1_open</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_open) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
 <LI><a href="#[d8]">drv_humi_sensirion_shtc1_read</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_read) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
 <LI><a href="#[d9]">drv_humi_sensirion_shtc1_write</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_write) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
 <LI><a href="#[dd]">drv_mag_memsic_mmc3680kj_close</a> from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_close) referenced from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
 <LI><a href="#[e0]">drv_mag_memsic_mmc3680kj_ioctl</a> from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_ioctl) referenced from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
 <LI><a href="#[e1]">drv_mag_memsic_mmc3680kj_irq_handle</a> from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_irq_handle) referenced from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
 <LI><a href="#[dc]">drv_mag_memsic_mmc3680kj_open</a> from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_open) referenced from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
 <LI><a href="#[de]">drv_mag_memsic_mmc3680kj_read</a> from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_read) referenced from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
 <LI><a href="#[df]">drv_mag_memsic_mmc3680kj_write</a> from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_write) referenced from drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
 <LI><a href="#[e3]">drv_ps_liteon_ltr553_close</a> from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_close) referenced from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
 <LI><a href="#[e6]">drv_ps_liteon_ltr553_ioctl</a> from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_ioctl) referenced from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
 <LI><a href="#[e7]">drv_ps_liteon_ltr553_irq_handle</a> from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_irq_handle) referenced from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
 <LI><a href="#[e2]">drv_ps_liteon_ltr553_open</a> from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_open) referenced from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
 <LI><a href="#[e4]">drv_ps_liteon_ltr553_read</a> from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_read) referenced from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
 <LI><a href="#[e5]">drv_ps_liteon_ltr553_write</a> from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_write) referenced from drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
 <LI><a href="#[e9]">drv_temp_sensirion_shtc1_close</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_close) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
 <LI><a href="#[ec]">drv_temp_sensirion_shtc1_ioctl</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_ioctl) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
 <LI><a href="#[ed]">drv_temp_sensirion_shtc1_irq_handle</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_irq_handle) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
 <LI><a href="#[e8]">drv_temp_sensirion_shtc1_open</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_open) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
 <LI><a href="#[ea]">drv_temp_sensirion_shtc1_read</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_read) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
 <LI><a href="#[eb]">drv_temp_sensirion_shtc1_write</a> from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_write) referenced from drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
 <LI><a href="#[ee]">dyn_mem_proc_task</a> from k_dyn_mem_proc.o(i.dyn_mem_proc_task) referenced from k_dyn_mem_proc.o(i.dyn_mem_proc_task_start)
 <LI><a href="#[136]">event_close</a> from device.o(i.event_close) referenced from device.o(.constdata)
 <LI><a href="#[139]">event_ioctl</a> from device.o(i.event_ioctl) referenced from device.o(.constdata)
 <LI><a href="#[135]">event_open</a> from device.o(i.event_open) referenced from device.o(.constdata)
 <LI><a href="#[13a]">event_poll</a> from device.o(i.event_poll) referenced from device.o(.constdata)
 <LI><a href="#[137]">event_read</a> from device.o(i.event_read) referenced from device.o(.constdata)
 <LI><a href="#[138]">event_write</a> from device.o(i.event_write) referenced from device.o(.constdata)
 <LI><a href="#[129]">fatfs_close</a> from fatfs.o(i.fatfs_close) referenced from fatfs.o(.constdata)
 <LI><a href="#[133]">fatfs_closedir</a> from fatfs.o(i.fatfs_closedir) referenced from fatfs.o(.constdata)
 <LI><a href="#[12c]">fatfs_lseek</a> from fatfs.o(i.fatfs_lseek) referenced from fatfs.o(.constdata)
 <LI><a href="#[134]">fatfs_mkdir</a> from fatfs.o(i.fatfs_mkdir) referenced from fatfs.o(.constdata)
 <LI><a href="#[128]">fatfs_open</a> from fatfs.o(i.fatfs_open) referenced from fatfs.o(.constdata)
 <LI><a href="#[131]">fatfs_opendir</a> from fatfs.o(i.fatfs_opendir) referenced from fatfs.o(.constdata)
 <LI><a href="#[12a]">fatfs_read</a> from fatfs.o(i.fatfs_read) referenced from fatfs.o(.constdata)
 <LI><a href="#[132]">fatfs_readdir</a> from fatfs.o(i.fatfs_readdir) referenced from fatfs.o(.constdata)
 <LI><a href="#[130]">fatfs_rename</a> from fatfs.o(i.fatfs_rename) referenced from fatfs.o(.constdata)
 <LI><a href="#[12e]">fatfs_stat</a> from fatfs.o(i.fatfs_stat) referenced from fatfs.o(.constdata)
 <LI><a href="#[12d]">fatfs_sync</a> from fatfs.o(i.fatfs_sync) referenced from fatfs.o(.constdata)
 <LI><a href="#[12f]">fatfs_unlink</a> from fatfs.o(i.fatfs_unlink) referenced from fatfs.o(.constdata)
 <LI><a href="#[12b]">fatfs_write</a> from fatfs.o(i.fatfs_write) referenced from fatfs.o(.constdata)
 <LI><a href="#[b5]">fputc</a> from soc_init.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[b5]">fputc</a> from soc_init.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[5]">gc0329_Config</a> from gc0329.o(i.gc0329_Config) referenced 2 times from gc0329.o(.data)
 <LI><a href="#[3]">gc0329_Init</a> from gc0329.o(i.gc0329_Init) referenced 2 times from gc0329.o(.data)
 <LI><a href="#[4]">gc0329_ReadID</a> from gc0329.o(i.gc0329_ReadID) referenced 2 times from gc0329.o(.data)
 <LI><a href="#[f8]">handle_at</a> from atdemo.o(i.handle_at) referenced from atdemo.o(.constdata)
 <LI><a href="#[ef]">idle_task</a> from k_idle.o(i.idle_task) referenced from k_sys.o(i.krhino_init)
 <LI><a href="#[bb]">krhino_task_deathbed</a> from k_task.o(i.krhino_task_deathbed) referenced from port_c.o(i.cpu_task_stack_init)
 <LI><a href="#[74]">main</a> from main_1.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c]">memcpy</a> from memmove.o(.text) referenced 2 times from gui__private.o(.data)
 <LI><a href="#[b]">memset</a> from memseta.o(.text) referenced 2 times from gui__private.o(.data)
 <LI><a href="#[124]">sensor_close</a> from sensor_hal.o(i.sensor_close) referenced from sensor_hal.o(.constdata)
 <LI><a href="#[127]">sensor_ioctl</a> from sensor_hal.o(i.sensor_ioctl) referenced from sensor_hal.o(.constdata)
 <LI><a href="#[123]">sensor_open</a> from sensor_hal.o(i.sensor_open) referenced from sensor_hal.o(.constdata)
 <LI><a href="#[125]">sensor_read</a> from sensor_hal.o(i.sensor_read) referenced from sensor_hal.o(.constdata)
 <LI><a href="#[126]">sensor_write</a> from sensor_hal.o(i.sensor_write) referenced from sensor_hal.o(.constdata)
 <LI><a href="#[2]">soc_err_proc</a> from soc_impl.o(i.soc_err_proc) referenced 2 times from soc_impl.o(.data)
 <LI><a href="#[bc]">straight_16</a> from crc16.o(i.straight_16) referenced from crc16.o(i.crc16ccitt)
 <LI><a href="#[bd]">straight_8</a> from crc16.o(i.straight_8) referenced from crc16.o(i.crc16ccitt)
 <LI><a href="#[f1]">timer_task</a> from k_timer.o(i.timer_task) referenced from k_timer.o(i.ktimer_init)
 <LI><a href="#[b9]">uData_report_demo</a> from main_1.o(i.uData_report_demo) referenced from main_1.o(i.application_start)
 <LI><a href="#[f6]">uData_service_dispatcher</a> from service_mgr.o(i.uData_service_dispatcher) referenced from service_mgr.o(i.uData_service_mgr_init)
 <LI><a href="#[f5]">vfs_poll_notify</a> from vfs.o(i.vfs_poll_notify) referenced from vfs.o(i.pre_poll)
 <LI><a href="#[f3]">wifi_cmd_task</a> from atdemo.o(i.wifi_cmd_task) referenced from main_1.o(i.main)
 <LI><a href="#[f0]">worker_task</a> from k_workqueue.o(i.worker_task) referenced from k_workqueue.o(i.krhino_workqueue_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[76]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(.text)
</UL>
<P><STRONG><a name="[54d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[191]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[54f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[550]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[551]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[552]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[43b]"></a>cpu_intrpt_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_is_exist
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[43c]"></a>cpu_intrpt_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_is_exist
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[508]"></a>cpu_first_task_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>

<P><STRONG><a name="[44f]"></a>cpu_task_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>

<P><STRONG><a name="[4f7]"></a>cpu_intrpt_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_c_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; krhino_stack_ovf_check
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l496xx_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[194]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[553]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[554]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_head_push
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_get_report_pkg
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_process
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_payload
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_up_cmd
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[217]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor_SetFunc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_sta_quit_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_ap_quit_func
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_info_start_func
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_scan_option_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_power_save_func
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_event_notification_func
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_dhcp_func
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_ip_mask_gate_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_info_start_func
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_info_func
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_fomat_func
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_echo_func
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_flash_lock_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_send_raw_func
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_recv_cfg_func
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
</UL>

<P><STRONG><a name="[3d6]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[555]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data)
</UL>
<P><STRONG><a name="[556]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_AddHLine
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[557]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[558]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_at
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_scan_func
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_mac_func
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_sta_quit_func
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_firmware_version_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_ap_quit_func
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_test
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_run_time_func
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_memory_free_func
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_info_start_func
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_scan_option_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_power_save_func
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_event_notification_func
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_dhcp_func
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_ip_mask_gate_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_info_start_func
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_info_func
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_fomat_func
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_echo_func
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_flash_lock_func
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_info_func
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_scan_option_func
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_power_save_func
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_event_notification_func
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_dhcp_func
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_ip_mask_gate_func
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_info_func
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_info_func
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_fomat_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_echo_func
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_flash_lock_func
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_cip_recv_cfg_func
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recover_factory_func
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reboot_func
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_sta_current_status_func
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion_old
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ap_current_status_func
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fota_start_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_send_raw_func
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_recv_cfg_func
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t0_send_command_recv_status
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_AnswerReq
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_create_obj_ctx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_process
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_dispatcher
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mag_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_data
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GET_ALL_WIFI_SSID
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTransmit
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se2
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_payload
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_slprt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_images_index
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_up_cmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fota_start_func
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_get_calib_param
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_fs
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_opendir
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_TransferSize
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Clear
</UL>

<P><STRONG><a name="[559]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data)
</UL>
<P><STRONG><a name="[434]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_scan_func
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_mac_func
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_sta_quit_func
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_firmware_version_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_ap_quit_func
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_run_time_func
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_memory_free_func
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_info_start_func
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_scan_option_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_power_save_func
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_event_notification_func
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_dhcp_func
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_ip_mask_gate_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_info_start_func
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_info_func
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_fomat_func
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_echo_func
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_flash_lock_func
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_info_func
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_scan_option_func
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_power_save_func
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_event_notification_func
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_dhcp_func
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_ip_mask_gate_func
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_info_func
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_info_func
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_fomat_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_echo_func
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_flash_lock_func
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_cip_recv_cfg_func
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_sta_current_status_func
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion_old
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ap_current_status_func
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fota_start_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_send_raw_func
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_recv_cfg_func
</UL>

<P><STRONG><a name="[1e4]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GET_ALL_WIFI_SSID
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_at
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_scan_func
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_mac_func
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_sta_quit_func
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_firmware_version_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_ap_quit_func
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_test
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_run_time_func
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_memory_free_func
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_info_start_func
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_scan_option_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_power_save_func
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_event_notification_func
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_dhcp_func
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_ip_mask_gate_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_info_start_func
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_info_func
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_fomat_func
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_echo_func
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_flash_lock_func
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_info_func
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_scan_option_func
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_power_save_func
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_event_notification_func
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_dhcp_func
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_ip_mask_gate_func
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_info_func
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_info_func
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_fomat_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_echo_func
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_flash_lock_func
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_cip_recv_cfg_func
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recover_factory_func
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reboot_func
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_sta_current_status_func
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion_old
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ap_current_status_func
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fota_start_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_send_raw_func
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_recv_cfg_func
</UL>

<P><STRONG><a name="[1e5]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GET_ALL_WIFI_SSID
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readdir
</UL>

<P><STRONG><a name="[1e2]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GET_ALL_WIFI_SSID
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_up_cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_sta_quit_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_ap_quit_func
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_info_start_func
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_scan_option_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_power_save_func
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_event_notification_func
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_dhcp_func
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_ip_mask_gate_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_info_start_func
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_info_func
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_fomat_func
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_echo_func
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_flash_lock_func
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fota_start_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_send_raw_func
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_recv_cfg_func
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_open
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_close
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_selected_sensor
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
</UL>

<P><STRONG><a name="[1e6]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GET_ALL_WIFI_SSID
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_up_cmd
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
</UL>

<P><STRONG><a name="[54a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgf_init
</UL>

<P><STRONG><a name="[46f]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_ioctl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_ioctl
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_ioctl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_ioctl
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_ioctl
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_ioctl
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_ioctl
</UL>

<P><STRONG><a name="[4be]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_open
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_close
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_selected_sensor
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[55a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[55b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[55c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[55d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[55e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[19a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3e2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[192]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[55f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[560]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[561]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[562]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>BSP_GUI_init</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gui_init.o(i.BSP_GUI_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = BSP_GUI_init &rArr; GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCreateFlags
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[1aa]"></a>BSP_LCD_Clear</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st7789.o(i.BSP_LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_LCD_Clear &rArr; ST7789H2_SetCursor &rArr; ST7789H2_WriteReg &rArr; LcdWriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteDataMultiple
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Intro
</UL>

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>CAMERA_IO_Read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gc0329.o(i.CAMERA_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CAMERA_IO_Read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_mem_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_ReadID
</UL>

<P><STRONG><a name="[1af]"></a>CAMERA_IO_Write</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, gc0329.o(i.CAMERA_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CAMERA_IO_Write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_mem_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_ReadID
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_Init
</UL>

<P><STRONG><a name="[1b1]"></a>CAMERA_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, camera_demo.o(i.CAMERA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAMERA_Init &rArr; HAL_DCMI_ConfigCrop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_EnableCrop
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_ConfigCrop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
</UL>

<P><STRONG><a name="[1b4]"></a>CameraDEMO_Main</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, camera_demo.o(i.CameraDEMO_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CameraDEMO_Main &rArr; gc0329_ReadID &rArr; CAMERA_IO_Write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_close
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_power_onoff
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_ReadID
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcmi_dir
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_images_index
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
</UL>

<P><STRONG><a name="[6e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DCMI_IRQHandler &rArr; HAL_DCMI_IRQHandler &rArr; HAL_DCMI_FrameEventCallback &rArr; GC0329_CAMERA_FrameEventCallback &rArr; camera_dispaly &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; krhino_intrpt_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.DMA2_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DMA2_Channel6_IRQHandler &rArr; krhino_intrpt_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c5]"></a>DeviceClose</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_smartcard_stm32l4.o(i.DeviceClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceClose
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se
</UL>

<P><STRONG><a name="[1c7]"></a>DeviceOpen</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_smartcard_stm32l4.o(i.DeviceOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = DeviceOpen &rArr; SC_AnswerReq &rArr; iso7816_get_atr &rArr; HAL_SMARTCARD_Receive &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_AnswerReq
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se1
</UL>

<P><STRONG><a name="[1c9]"></a>DeviceTransmit</STRONG> (Thumb, 174 bytes, Stack size 544 bytes, hal_smartcard_stm32l4.o(i.DeviceTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = DeviceTransmit &rArr; t0_send_command_recv_status &rArr; HAL_SMARTCARD_Transmit &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t0_send_command_recv_status
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se2
</UL>

<P><STRONG><a name="[42]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; handing_shake &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; handing_shake &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1cc]"></a>GC0329_CAMERA_FrameEventCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, camera_demo.o(i.GC0329_CAMERA_FrameEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GC0329_CAMERA_FrameEventCallback &rArr; camera_dispaly &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_dispaly
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Suspend
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_FrameEventCallback
</UL>

<P><STRONG><a name="[1d0]"></a>GL_SetDefault</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gui_common.o(i.GL_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GL_SetDefault &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[1d6]"></a>GUIDEMO_CheckCancel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, guidemo.o(i.GUIDEMO_CheckCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_CheckCancel &rArr; GUI_Delay &rArr; GUI_Exec &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
</UL>

<P><STRONG><a name="[1d8]"></a>GUIDEMO_Delay</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, guidemo.o(i.GUIDEMO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_Delay &rArr; GUIDEMO_CheckCancel &rArr; GUI_Delay &rArr; GUI_Exec &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetMinMax
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GetTime
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_CheckCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Intro
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[1eb]"></a>GUIDEMO_DrawBk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidemo.o(i.GUIDEMO_DrawBk))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[1e8]"></a>GUIDEMO_G_Sensors</STRONG> (Thumb, 778 bytes, Stack size 104 bytes, guidemo_uncalssified.o(i.GUIDEMO_G_Sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_G_Sensors &rArr; GUI_DispFloatFix &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_DrawBk
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtCEOL
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_G_sensor
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mag_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_data
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_G_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[1de]"></a>GUIDEMO_GetTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guidemo.o(i.GUIDEMO_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUIDEMO_GetTime &rArr; GUI_GetTime &rArr; GUI_X_GetTime &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
</UL>

<P><STRONG><a name="[1f9]"></a>GUIDEMO_Intro</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, guidemo_intro.o(i.GUIDEMO_Intro))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_Intro &rArr; GUIDEMO_Delay &rArr; GUIDEMO_CheckCancel &rArr; GUI_Delay &rArr; GUI_Exec &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[1fb]"></a>GUIDEMO_Loopback</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, guidemo_uncalssified.o(i.GUIDEMO_Loopback))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_Loopback &rArr; handle_upgrade &rArr; send_upgrade &rArr; request_payload &rArr; get_upgresp &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringHCenterAt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_DrawBk
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCEOL
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[1ff]"></a>GUIDEMO_Main</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, guidemo.o(i.GUIDEMO_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_Main &rArr; _Main &rArr; GUIDEMO_Version_Info &rArr; GUIDEMO_GET_ALL_WIFI_SSID &rArr; at_cmd_request &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_to_sd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_open
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_close
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_task
</UL>

<P><STRONG><a name="[204]"></a>GUIDEMO_Other_Sensors</STRONG> (Thumb, 482 bytes, Stack size 48 bytes, guidemo_uncalssified.o(i.GUIDEMO_Other_Sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_Other_Sensors &rArr; GUI_DispStringHCenterAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringHCenterAt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_DrawBk
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtCEOL
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCEOL
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_other_sensor
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ps_data
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_humi_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baro_data
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_als_data
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_other_sensor
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[20d]"></a>GUIDEMO_Se</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, guidemo_uncalssified.o(i.GUIDEMO_Se))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_Se &rArr; test_se &rArr; test_se2 &rArr; DeviceTransmit &rArr; t0_send_command_recv_status &rArr; HAL_SMARTCARD_Transmit &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringHCenterAt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_DrawBk
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCEOL
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[20f]"></a>GUIDEMO_Version_Info</STRONG> (Thumb, 400 bytes, Stack size 96 bytes, guidemo_uncalssified.o(i.GUIDEMO_Version_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_Version_Info &rArr; GUIDEMO_GET_ALL_WIFI_SSID &rArr; at_cmd_request &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringHCenterAt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_DrawBk
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sync
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtCEOL
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCEOL
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GET_ALL_WIFI_SSID
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[214]"></a>GUIDRV_FlexColor_Config</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, guidrv_flexcolor.o(i.GUIDRV_FlexColor_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUIDRV_FlexColor_Config &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[216]"></a>GUIDRV_FlexColor_SetFunc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, guidrv_flexcolor.o(i.GUIDRV_FlexColor_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUIDRV_FlexColor_SetFunc &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[9d]"></a>GUIDRV_FlexColor_SetFunc66709</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUIDRV_FlexColor_SetFunc66709 &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_flexcolor_template.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[9c]"></a>GUIDRV_FlexColor_SetMode16bppC0B8</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUIDRV_FlexColor_SetMode16bppC0B8 &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_flexcolor_template.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[80]"></a>GUIDRV_FlexColor__GetPixelIndexNoCache</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, guidrv_flexcolor.o(i.GUIDRV_FlexColor__GetPixelIndexNoCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUIDRV_FlexColor__GetPixelIndexNoCache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
</UL>
<P><STRONG><a name="[215]"></a>GUIDRV_FlexColor__InitOnce</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, guidrv_flexcolor.o(i.GUIDRV_FlexColor__InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor_SetMode16bppC0B8
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor_SetFunc66709
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor_SetFunc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevFunc_SetVSize
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevFunc_SetSize
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevFunc_On
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevFunc_Off
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevFunc_Init
</UL>

<P><STRONG><a name="[84]"></a>GUIDRV_FlexColor__SetLog2Phys</STRONG> (Thumb, 56 bytes, Stack size 88 bytes, guidrv_flexcolor.o(i.GUIDRV_FlexColor__SetLog2Phys))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUIDRV_FlexColor__SetLog2Phys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i.GUIDRV_FlexColor__InitOnce)
</UL>
<P><STRONG><a name="[81]"></a>GUIDRV_FlexColor__SetPixelIndexNoCache</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, guidrv_flexcolor.o(i.GUIDRV_FlexColor__SetPixelIndexNoCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUIDRV_FlexColor__SetPixelIndexNoCache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
</UL>
<P><STRONG><a name="[15e]"></a>GUIMONO_DispChar</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, gui_charm.o(i.GUIMONO_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_IsInFont))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>GUIPROP_DispChar</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, gui_charp.o(i.GUIPROP_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GUIPROP_DispChar &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> f20_ascii.o(.constdata)
<LI> f24_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, gui_charp.o(i.GUIPROP_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUIPROP_GetCharDistX
</UL>
<BR>[Address Reference Count : 2]<UL><LI> f20_ascii.o(.constdata)
<LI> f24_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP_GetFontInfo))
<BR>[Address Reference Count : 2]<UL><LI> f20_ascii.o(.constdata)
<LI> f24_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP_IsInFont))
<BR>[Address Reference Count : 2]<UL><LI> f20_ascii.o(.constdata)
<LI> f24_ascii.o(.constdata)
</UL>
<P><STRONG><a name="[21d]"></a>GUITASK_CopyContext</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, gui_task.o(i.GUITASK_CopyContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GUITASK_CopyContext &rArr; GUI_X_GetTaskId &rArr; krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[21f]"></a>GUITASK_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gui_task.o(i.GUITASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUITASK_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[222]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_AllocNoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[224]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gui_alloc.o(i.GUI_ALLOC_AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[2a0]"></a>GUI_ALLOC_AssignMemory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_AssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[249]"></a>GUI_ALLOC_Exit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_ALLOC_Exit
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exit
</UL>

<P><STRONG><a name="[225]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gui_alloc.o(i.GUI_ALLOC_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GUI_USAGE_BM_Delete
</UL>

<P><STRONG><a name="[237]"></a>GUI_ALLOC_FreeFixedBlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_FreeFixedBlock))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
</UL>

<P><STRONG><a name="[218]"></a>GUI_ALLOC_GetFixedBlock</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, gui_alloc.o(i.GUI_ALLOC_GetFixedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevFunc_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>

<P><STRONG><a name="[37d]"></a>GUI_ALLOC_GetSize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
</UL>

<P><STRONG><a name="[239]"></a>GUI_ALLOC_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[263]"></a>GUI_ALLOC_LockH</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_LockH))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetMinMax
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[22a]"></a>GUI_ALLOC_Realloc</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, gui_alloc.o(i.GUI_ALLOC_Realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_Realloc &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
</UL>

<P><STRONG><a name="[22b]"></a>GUI_ALLOC_RequestSize</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_RequestSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_RequestSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[23b]"></a>GUI_ALLOC_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[264]"></a>GUI_ALLOC_UnlockH</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_UnlockH))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetMinMax
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[283]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_h2p))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_EnableMemdev
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[22c]"></a>GUI_AddDecMin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_val.o(i.GUI_AddDecMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_AddDecMin &rArr; GUI_AddDecShift
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
</UL>

<P><STRONG><a name="[22e]"></a>GUI_AddDecShift</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, gui_common.o(i.GUI_AddDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
</UL>

<P><STRONG><a name="[240]"></a>GUI_AddSign</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_common.o(i.GUI_AddSign))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
</UL>

<P><STRONG><a name="[3d7]"></a>GUI_CalcColorDist</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gui_common.o(i.GUI_CalcColorDist))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[22f]"></a>GUI_Clear</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gui_core.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GUI_Clear &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBkSimple
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[232]"></a>GUI_ClearRect</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, gui_core.o(i.GUI_ClearRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCEOL
</UL>

<P><STRONG><a name="[233]"></a>GUI_DEVICE_Create</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_device.o(i.GUI_DEVICE_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[234]"></a>GUI_DEVICE_CreateAndLink</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gui_device.o(i.GUI_DEVICE_CreateAndLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[236]"></a>GUI_DEVICE_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[235]"></a>GUI_DEVICE_Link</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, gui_device.o(i.GUI_DEVICE_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[261]"></a>GUI_DEVICE_LinkDevices</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, gui_device.o(i.GUI_DEVICE_LinkDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI_DEVICE_LinkDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[367]"></a>GUI_DEVICE_Unlink</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_Unlink))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[260]"></a>GUI_DEVICE_UnlinkTaskDevices</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_UnlinkTaskDevices))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[26e]"></a>GUI_DEVICE__GetpDriver</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE__GetpDriver))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
</UL>

<P><STRONG><a name="[1d7]"></a>GUI_Delay</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gui_time.o(i.GUI_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = GUI_Delay &rArr; GUI_Exec &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_CheckCancel
</UL>

<P><STRONG><a name="[1fc]"></a>GUI_DispCEOL</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gui_common.o(i.GUI_DispCEOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GUI_DispCEOL &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtCEOL
</UL>

<P><STRONG><a name="[1f8]"></a>GUI_DispDec</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, gui_val.o(i.GUI_DispDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GUI_DispDec &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
</UL>

<P><STRONG><a name="[23d]"></a>GUI_DispDecShift</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, gui_val.o(i.GUI_DispDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GUI_DispDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[1f6]"></a>GUI_DispFloatFix</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_valf.o(i.GUI_DispFloatFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = GUI_DispFloatFix &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
</UL>

<P><STRONG><a name="[23f]"></a>GUI_DispSDecShift</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, gui_val.o(i.GUI_DispSDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddSign
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[1f7]"></a>GUI_DispString</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, gui_dispstring.o(i.GUI_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringHCenterAt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtCEOL
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>

<P><STRONG><a name="[1ee]"></a>GUI_DispStringAt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_dispstring.o(i.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[1f0]"></a>GUI_DispStringAtCEOL</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gui_dispstring.o(i.GUI_DispStringAtCEOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringAtCEOL &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCEOL
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
</UL>

<P><STRONG><a name="[1fd]"></a>GUI_DispStringHCenterAt</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gui_dispstring.o(i.GUI_DispStringHCenterAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringHCenterAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
</UL>

<P><STRONG><a name="[1fa]"></a>GUI_DrawBitmap</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, gui_drawbitmap.o(i.GUI_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = GUI_DrawBitmap &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Intro
</UL>

<P><STRONG><a name="[1e0]"></a>GUI_Exec</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gui_common.o(i.GUI_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = GUI_Exec &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[201]"></a>GUI_Exit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_core.o(i.GUI_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_Exit &rArr; GUI_ALLOC_Exit
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[28a]"></a>GUI_GetBitsPerPixelEx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetBitsPerPixelEx))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>

<P><STRONG><a name="[21c]"></a>GUI_GetBkColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_common.o(i.GUI_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_GetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[24c]"></a>GUI_GetCharDistX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[24d]"></a>GUI_GetCharDistXEx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_char.o(i.GUI_GetCharDistXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[21b]"></a>GUI_GetColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_common.o(i.GUI_GetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[241]"></a>GUI_GetFontDistY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetFontDistY))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[24f]"></a>GUI_GetFontSizeY</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_common.o(i.GUI_GetFontSizeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontSizeY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextRect
</UL>

<P><STRONG><a name="[250]"></a>GUI_GetOrg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_common.o(i.GUI_GetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_GetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[251]"></a>GUI_GetStringDistX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_dispstring.o(i.GUI_GetStringDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextRect
</UL>

<P><STRONG><a name="[1dd]"></a>GUI_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_time.o(i.GUI_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_GetTime &rArr; GUI_X_GetTime &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GetTime
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
</UL>

<P><STRONG><a name="[23c]"></a>GUI_GetYAdjust</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetYAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCEOL
</UL>

<P><STRONG><a name="[28c]"></a>GUI_GetpfColor2IndexEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfColor2IndexEx))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[28b]"></a>GUI_GetpfIndex2ColorEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfIndex2ColorEx))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[1f5]"></a>GUI_GotoXY</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_common.o(i.GUI_GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
</UL>

<P><STRONG><a name="[1a8]"></a>GUI_Init</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, gui_core.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplaySize
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[1d1]"></a>GUI_Lock</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gui_task.o(i.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringHCenterAt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_EnableMemdev
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetMinMax
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtCEOL
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
</UL>

<P><STRONG><a name="[22d]"></a>GUI_Long2Len</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, gui_common.o(i.GUI_Long2Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_Long2Len
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
</UL>

<P><STRONG><a name="[262]"></a>GUI_MEMDEV_Clear</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, guidev_clear.o(i.GUI_MEMDEV_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Clear &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[265]"></a>GUI_MEMDEV_CopyToLCD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[266]"></a>GUI_MEMDEV_CopyToLCDAt</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCDAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
</UL>

<P><STRONG><a name="[26d]"></a>GUI_MEMDEV_CreateEx</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, guidev.o(i.GUI_MEMDEV_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[270]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[272]"></a>GUI_MEMDEV_Draw</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, guidev_banding.o(i.GUI_MEMDEV_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[27c]"></a>GUI_MEMDEV_GetBitsPerPixel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_GetBitsPerPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetBitsPerPixel &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[27e]"></a>GUI_MEMDEV_GetDataPtr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, guidev_getdataptr.o(i.GUI_MEMDEV_GetDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[277]"></a>GUI_MEMDEV_GetYSize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, guidev_getysize.o(i.GUI_MEMDEV_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[a2]"></a>GUI_MEMDEV_Paint1Static</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Paint1Static &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wm.o(i.WM__PaintWinAndOverlays)
<LI> wm.o(i._PaintTransChildren)
</UL>
<P><STRONG><a name="[27a]"></a>GUI_MEMDEV_ReduceYSize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_reduceysize.o(i.GUI_MEMDEV_ReduceYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_ReduceYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[279]"></a>GUI_MEMDEV_Select</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, guidev.o(i.GUI_MEMDEV_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Select &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[27b]"></a>GUI_MEMDEV_SetOrg</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, guidev_setorg.o(i.GUI_MEMDEV_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_SetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[284]"></a>GUI_MEMDEV_Write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, guidev_write.o(i.GUI_MEMDEV_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Write &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[26f]"></a>GUI_MEMDEV__CreateFixed</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, guidev.o(i.GUI_MEMDEV__CreateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
</UL>

<P><STRONG><a name="[ab]"></a>GUI_MEMDEV__WriteToActiveAlpha</STRONG> (Thumb, 418 bytes, Stack size 136 bytes, guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveAlpha &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[285]"></a>GUI_MEMDEV__WriteToActiveAt</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, guidev.o(i.GUI_MEMDEV__WriteToActiveAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
</UL>

<P><STRONG><a name="[aa]"></a>GUI_MEMDEV__WriteToActiveOpaque</STRONG> (Thumb, 2070 bytes, Stack size 168 bytes, guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[28f]"></a>GUI_MULTIBUF_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_multibuf.o(i.GUI_MULTIBUF_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_MULTIBUF_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[37f]"></a>GUI_MergeRect</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gui_common.o(i.GUI_MergeRect))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[3c2]"></a>GUI_MoveRect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_common.o(i.GUI_MoveRect))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[290]"></a>GUI_PollKeyMsg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gui_onkey.o(i.GUI_PollKeyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = GUI_PollKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[292]"></a>GUI_ReadRectEx</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lcd_readrect.o(i.GUI_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_ReadRectEx &rArr; LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[2ab]"></a>GUI_RectsIntersect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_common.o(i.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[294]"></a>GUI_RestoreContext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_common.o(i.GUI_RestoreContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_RestoreContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[295]"></a>GUI_SaveContext_W</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_common.o(i.GUI_SaveContext_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_SaveContext_W &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[269]"></a>GUI_SelectLCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[267]"></a>GUI_SelectLayer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_selectlayer.o(i.GUI_SelectLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[297]"></a>GUI_SetBkColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_SetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBkSimple
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[1ec]"></a>GUI_SetColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[2a1]"></a>GUI_SetDefaultFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_core.o(i.GUI_SetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[247]"></a>GUI_SetDrawMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_common.o(i.GUI_SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[1ed]"></a>GUI_SetFont</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_SetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[25d]"></a>GUI_SetOrg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_SetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[246]"></a>GUI_SetTextAlign</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_common.o(i.GUI_SetTextAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_SetTextAlign &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringHCenterAt
</UL>

<P><STRONG><a name="[299]"></a>GUI_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_waitevent.o(i.GUI_SignalEvent))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKeyMsg
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[298]"></a>GUI_StoreKey</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_onkey.o(i.GUI_StoreKey))
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[29a]"></a>GUI_StoreKeyMsg</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gui_onkey.o(i.GUI_StoreKeyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_StoreKeyMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[29b]"></a>GUI_TIMER_Delete</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, gui_timer.o(i.GUI_TIMER_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[29c]"></a>GUI_TIMER_GetFlag</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_GetFlag &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[29d]"></a>GUI_TIMER__GetFirstTimer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER__GetFirstTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetFirstTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[29e]"></a>GUI_TIMER__GetNextTimerLin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER__GetNextTimerLin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetNextTimerLin
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[2ad]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__GetCharCodeInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[245]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__NumChars2NumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[3db]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, guidev_usage.o(i.GUI_USAGE_AddRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[286]"></a>GUI_USAGE_BM_Create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[271]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, guidev_usage.o(i.GUI_USAGE_DecUseCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[1d3]"></a>GUI_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_task.o(i.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = GUI_Unlock &rArr; GUI_X_Unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringHCenterAt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_EnableMemdev
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetMinMax
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtCEOL
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
</UL>

<P><STRONG><a name="[253]"></a>GUI_X_Config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guiconf.o(i.GUI_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefaultFont
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[23a]"></a>GUI_X_Delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_x_rhino.o(i.GUI_X_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = GUI_X_Delay &rArr; krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_ExecIdle
</UL>

<P><STRONG><a name="[e]"></a>GUI_X_ExecIdle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_x_rhino.o(i.GUI_X_ExecIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = GUI_X_ExecIdle &rArr; GUI_X_Delay &rArr; krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_waitevent.o(.data)
</UL>
<P><STRONG><a name="[21e]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_rhino.o(i.GUI_X_GetTaskId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_X_GetTaskId &rArr; krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
</UL>

<P><STRONG><a name="[238]"></a>GUI_X_GetTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gui_x_rhino.o(i.GUI_X_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_X_GetTime &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[255]"></a>GUI_X_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_x_rhino.o(i.GUI_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_X_Init &rArr; krhino_sem_create &rArr; sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[221]"></a>GUI_X_InitOS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_x_rhino.o(i.GUI_X_InitOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GUI_X_InitOS &rArr; krhino_sem_create &rArr; sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[25f]"></a>GUI_X_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_x_rhino.o(i.GUI_X_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[29f]"></a>GUI_X_Unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_x_rhino.o(i.GUI_X_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = GUI_X_Unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[287]"></a>GUI__AllocAlphaBuffer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui__alpha.o(i.GUI__AllocAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GUI__AllocAlphaBuffer &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[281]"></a>GUI__AlphaPreserveTrans</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_setalpha.o(i.GUI__AlphaPreserveTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__AlphaPreserveTrans
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_SetAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[28d]"></a>GUI__CompactPixelIndices</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, gui__compactpixelindices.o(i.GUI__CompactPixelIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[289]"></a>GUI__CompactPixelIndicesEx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui__compactpixelindices.o(i.GUI__CompactPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__CompactPixelIndicesEx &rArr; GUI__ConvertColor2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ConvertColor2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[2aa]"></a>GUI__ConvertColor2Index</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, gui__compactpixelindices.o(i.GUI__ConvertColor2Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__ConvertColor2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
</UL>

<P><STRONG><a name="[244]"></a>GUI__DispLine</STRONG> (Thumb, 462 bytes, Stack size 56 bytes, gui_charline.o(i.GUI__DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[288]"></a>GUI__DoAlphaBlending</STRONG> (Thumb, 446 bytes, Stack size 128 bytes, gui__alpha.o(i.GUI__DoAlphaBlending))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndicesEx
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[2ae]"></a>GUI__ExpandPixelIndicesEx</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, gui__expandpixelindices.o(i.GUI__ExpandPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__ExpandPixelIndicesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[2a8]"></a>GUI__GetAlphaBuffer</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, gui__alpha.o(i.GUI__GetAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
</UL>

<P><STRONG><a name="[243]"></a>GUI__GetLineDistX</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gui_charline.o(i.GUI__GetLineDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GUI__GetLineDistX &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
</UL>

<P><STRONG><a name="[242]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__GetLineNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[252]"></a>GUI__GetNumChars</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gui_uc.o(i.GUI__GetNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__GetNumChars
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
</UL>

<P><STRONG><a name="[3c3]"></a>GUI__IntersectRect</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gui__private.o(i.GUI__IntersectRect))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[369]"></a>GUI__IntersectRects</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gui__private.o(i.GUI__IntersectRects))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[2ac]"></a>GUI__ManageCache</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__managecache.o(i.GUI__ManageCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[2b0]"></a>GUI__ManageCacheEx</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, gui__managecache.o(i.GUI__ManageCacheEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>

<P><STRONG><a name="[9]"></a>GUI__MixColors</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, gui__alpha.o(i.GUI__MixColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI__MixColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>GUI__MixColorsBulk</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, gui__alpha.o(i.GUI__MixColorsBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__MixColorsBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.data)
</UL>
<P><STRONG><a name="[220]"></a>GUI__RegisterExit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_core.o(i.GUI__RegisterExit))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_Config
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>

<P><STRONG><a name="[3dc]"></a>GUI__memset16</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, gui__private.o(i.GUI__memset16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 1174 bytes, Stack size 32 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_ADC_Init</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[2ba]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32l4xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_CRC_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32l4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_DCMI_ConfigCrop</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_ConfigCrop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DCMI_ConfigCrop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Init
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_DCMI_EnableCrop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_EnableCrop))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Init
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_DCMI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAXferCplt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAHalfXferCplt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAError
</UL>

<P><STRONG><a name="[1be]"></a>HAL_DCMI_FrameEventCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, camera_demo.o(i.HAL_DCMI_FrameEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_DCMI_FrameEventCallback &rArr; GC0329_CAMERA_FrameEventCallback &rArr; camera_dispaly &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0329_CAMERA_FrameEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAXferCplt
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_DCMI_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_DCMI_IRQHandler &rArr; HAL_DCMI_FrameEventCallback &rArr; GC0329_CAMERA_FrameEventCallback &rArr; camera_dispaly &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_FrameEventCallback
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_VsyncEventCallback
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_LineEventCallback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_ErrorCallback
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[2be]"></a>HAL_DCMI_Init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_DCMI_Init &rArr; HAL_DCMI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_DCMI_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_DCMI_MspInit</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, stm32l4xx_hal_msp.o(i.HAL_DCMI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_DCMI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_DCMI_Resume</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_to_sd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0329_CAMERA_FrameEventCallback
</UL>

<P><STRONG><a name="[2c4]"></a>HAL_DCMI_Start_DMA</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_DCMI_Start_DMA &rArr; DCMI_TransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_TransferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_open
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_DCMI_Stop</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DCMI_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_close
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_DCMI_Suspend</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DCMI_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_to_sd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0329_CAMERA_FrameEventCallback
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_DCMI_VsyncEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_dcmi.o(i.HAL_DCMI_VsyncEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_DMA_Abort</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Stop
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Abort
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_IRQHandler
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_IRQHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_IRQHandler
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_DMA_Init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAXferCplt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DMAHalfXferCplt
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main_1.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; handing_shake &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKeyMsg
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handing_shake
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; handing_shake &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspInit
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_MspInit
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_MspInit
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_MspInit
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_MspInit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_MspInit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_MspInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_MspInit
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
</UL>

<P><STRONG><a name="[4c9]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_toggle
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_low
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_high
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteDataMultiple
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_dispaly
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Reset
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Suspend
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Stop
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Transmit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Receive
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_update_data
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_WaitOnFlagUntilTimeout
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[354]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Init
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Init
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_recv
</UL>

<P><STRONG><a name="[2d3]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_mem_read
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_mem_write
</UL>

<P><STRONG><a name="[2cd]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[39f]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[2db]"></a>HAL_InitTick</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, soc_init.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_MspInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[4df]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
</UL>

<P><STRONG><a name="[2c1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspInit
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_para_transform
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_MspInit
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_MspInit
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_MspInit
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_MspInit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_MspInit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_MspInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_MspInit
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
</UL>

<P><STRONG><a name="[2c0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspInit
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_para_transform
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_MspInit
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_MspInit
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_MspInit
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_MspInit
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_MspInit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_MspInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_MspInit
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
</UL>

<P><STRONG><a name="[2da]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[3a2]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[380]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[3a5]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2df]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 1112 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 950 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspInit
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_MspInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_MspInit
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
</UL>

<P><STRONG><a name="[2e6]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3a3]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2e2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_SetConfig
</UL>

<P><STRONG><a name="[2e0]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_SetConfig
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_SetConfig
</UL>

<P><STRONG><a name="[2e7]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_MCOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_MCOConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2e8]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1194 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_SAI_Abort</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SAI_Abort &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_IRQHandler
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_SAI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAAbort
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_SAI_IRQHandler</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SAI_IRQHandler &rArr; HAL_SAI_Abort &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_IRQHandler
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_SAI_Init</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, stm32l4xx_hal_sai.o(i.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI2_Init
</UL>

<P><STRONG><a name="[2ef]"></a>HAL_SAI_MspInit</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, stm32l4xx_hal_msp.o(i.HAL_SAI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[2fe]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_init
</UL>

<P><STRONG><a name="[2f9]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[398]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 472 bytes, Stack size 20 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2f4]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_stat_get
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_blks_write
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_blks_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[2f7]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[2ff]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_init
</UL>

<P><STRONG><a name="[301]"></a>HAL_SD_InitCard</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[300]"></a>HAL_SD_MspInit</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, hal_sd_stm32l4.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[305]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_blks_read
</UL>

<P><STRONG><a name="[2fa]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2fb]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[30a]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_blks_write
</UL>

<P><STRONG><a name="[30f]"></a>HAL_SMARTCARD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_smartcard.o(i.HAL_SMARTCARD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_DMAAbortOnError
</UL>

<P><STRONG><a name="[30d]"></a>HAL_SMARTCARD_IRQHandler</STRONG> (Thumb, 460 bytes, Stack size 24 bytes, stm32l4xx_hal_smartcard.o(i.HAL_SMARTCARD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SMARTCARD_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_RxCpltCallback
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_ErrorCallback
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_EndTxTransfer
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_EndTransmit_IT
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[313]"></a>HAL_SMARTCARD_Init</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32l4xx_hal_smartcard.o(i.HAL_SMARTCARD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SMARTCARD_Init &rArr; HAL_SMARTCARD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_MspInit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_WaitOnFlagUntilTimeout
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_SetConfig
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Smartcard_Init
</UL>

<P><STRONG><a name="[314]"></a>HAL_SMARTCARD_MspInit</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, hal_smartcard_stm32l4.o(i.HAL_SMARTCARD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SMARTCARD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Init
</UL>

<P><STRONG><a name="[318]"></a>HAL_SMARTCARD_Receive</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32l4xx_hal_smartcard.o(i.HAL_SMARTCARD_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SMARTCARD_Receive &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t0_send_command_recv_status
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_get_atr
</UL>

<P><STRONG><a name="[311]"></a>HAL_SMARTCARD_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_smartcard.o(i.HAL_SMARTCARD_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_IRQHandler
</UL>

<P><STRONG><a name="[319]"></a>HAL_SMARTCARD_Transmit</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, stm32l4xx_hal_smartcard.o(i.HAL_SMARTCARD_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SMARTCARD_Transmit &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t0_send_command_recv_status
</UL>

<P><STRONG><a name="[399]"></a>HAL_SMARTCARD_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_smartcard.o(i.HAL_SMARTCARD_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMARTCARD_EndTransmit_IT
</UL>

<P><STRONG><a name="[31a]"></a>HAL_SPI_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[31b]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[31c]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteReg
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteDataMultiple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteData
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_fb
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write
</UL>

<P><STRONG><a name="[3a4]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2dd]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[334]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[336]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[376]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[379]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[31e]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[31f]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32l4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[321]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[326]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, irda.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[328]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[32b]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[32c]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[32d]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
</UL>

<P><STRONG><a name="[32f]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
</UL>

<P><STRONG><a name="[330]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[337]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[331]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[33e]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[33f]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[340]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC1Config
</UL>

<P><STRONG><a name="[341]"></a>HAL_TIM_OC_Stop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC1Config
</UL>

<P><STRONG><a name="[332]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[333]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, irda.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC1Config
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[327]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[344]"></a>HAL_TIM_SlaveConfigSynchronization</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_SlaveConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_SlaveConfigSynchronization &rArr; TIM_SlaveTimer_SetConfig &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[335]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[349]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[348]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[346]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[34b]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_init
</UL>

<P><STRONG><a name="[34c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[350]"></a>HAL_UART_Receive_IT_Buf_Queue_1byte</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT_Buf_Queue_1byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
</UL>

<P><STRONG><a name="[3a7]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_Buf_Queue
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[4d0]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
</UL>

<P><STRONG><a name="[34a]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>LCD_AA_MixColors16</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lcd_aa.o(i.LCD_AA_MixColors16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_AA_MixColors16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(.data)
</UL>
<P><STRONG><a name="[2a9]"></a>LCD_AA_SetAndMask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_aa.o(i.LCD_AA_SetAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
</UL>

<P><STRONG><a name="[363]"></a>LCD_Color2Index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Color2Index))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableBM
</UL>

<P><STRONG><a name="[219]"></a>LCD_DrawBitmap</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, lcd.o(i.LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[13b]"></a>LCD_DrawHLine</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>LCD_DrawPixel</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>LCD_FillRect</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcd.o(i.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
</UL>

<P><STRONG><a name="[35e]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetBitsPerPixelEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetBitsPerPixelEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[24a]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[24e]"></a>LCD_GetColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>

<P><STRONG><a name="[35f]"></a>LCD_GetNumColors</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetNumColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetIndexMask_0
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[360]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetNumColorsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColorsEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[361]"></a>LCD_GetNumLayers</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_getnumdisplays.o(i.LCD_GetNumLayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumLayers
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[362]"></a>LCD_GetPalette</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_getex.o(i.LCD_GetPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPalette
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[275]"></a>LCD_GetVXSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetVXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVXSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[2af]"></a>LCD_GetVXSizeMax</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lcd_getex.o(i.LCD_GetVXSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetVXSizeMax
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>

<P><STRONG><a name="[276]"></a>LCD_GetVYSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetVYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVYSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[1e9]"></a>LCD_GetXSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetXSize
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[258]"></a>LCD_GetXSizeDisplay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetXSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[273]"></a>LCD_GetXSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetXSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[25b]"></a>LCD_GetXSizeMax</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lcd_getex.o(i.LCD_GetXSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetXSizeMax
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[27f]"></a>LCD_GetYSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetYSize
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[259]"></a>LCD_GetYSizeDisplay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetYSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[274]"></a>LCD_GetYSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i.LCD_GetYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetYSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[25a]"></a>LCD_GetYSizeMax</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lcd_getex.o(i.LCD_GetYSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetYSizeMax
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[6]"></a>LCD_GetpPalConvTableBM</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lcd_color.o(i.LCD_GetpPalConvTableBM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTableBM
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.data)
</UL>
<P><STRONG><a name="[24b]"></a>LCD_Index2Color</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Index2Color))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[89]"></a>LCD_Index2Color_888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_888_index2color.o(i.LCD_Index2Color_888))
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(i.GUI__DoAlphaBlending)
</UL>
<P><STRONG><a name="[87]"></a>LCD_Index2Color_8888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_8888_index2color.o(i.LCD_Index2Color_8888))
<BR>[Address Reference Count : 3]<UL><LI> gui__alpha.o(i.GUI__DoAlphaBlending)
<LI> guicc_8888.o(.constdata)
<LI> guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha)
</UL>
<P><STRONG><a name="[13e]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, guicc_m565.o(i.LCD_Index2Color_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[364]"></a>LCD_InitColors</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_color.o(i.LCD_InitColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[365]"></a>LCD_InitLUT</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lcd_color.o(i.LCD_InitLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_InitLUT &rArr; LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[296]"></a>LCD_SelectLCD</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd_selectlcd.o(i.LCD_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SelectLCD
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[1d2]"></a>LCD_SetBkColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[36d]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[368]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lcd_setcliprectex.o(i.LCD_SetClipRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[26c]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetClipRectMax))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
</UL>

<P><STRONG><a name="[1d4]"></a>LCD_SetColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColor))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[36c]"></a>LCD_SetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[25c]"></a>LCD_SetDisplaySize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_SetDisplaySize))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1d5]"></a>LCD_SetDrawMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetDrawMode))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[366]"></a>LCD_SetLUTEntryEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetLUTEntryEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[36a]"></a>LCD_SetSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[36b]"></a>LCD_SetVSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetVSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[26b]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_updatecolorindices.o(i.LCD_UpdateColorIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_UpdateColorIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[254]"></a>LCD_X_Config</STRONG> (Thumb, 104 bytes, Stack size 136 bytes, lcdconf_flexcolor_template.o(i.LCD_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = LCD_X_Config &rArr; GUIDRV_FlexColor_SetFunc &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_Config
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor_SetFunc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor_Config
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[36e]"></a>LCD_X_DisplayDriver</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcdconf_flexcolor_template.o(i.LCD_X_DisplayDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LCD_X_DisplayDriver &rArr; st7789_init &rArr; st7789_run_cfg_script &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevFunc_On
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevFunc_Off
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevFunc_Init
</UL>

<P><STRONG><a name="[28e]"></a>LCD__DrawBitmap_1bpp</STRONG> (Thumb, 496 bytes, Stack size 104 bytes, lcd.o(i.LCD__DrawBitmap_1bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[27d]"></a>LCD__GetBPPDevice</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD__GetBPPDevice))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[60]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LPUART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>LcdWriteData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcdconf_flexcolor_template.o(i.LcdWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LcdWriteData &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_high
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_flexcolor_template.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[9a]"></a>LcdWriteDataMultiple</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcdconf_flexcolor_template.o(i.LcdWriteDataMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LcdWriteDataMultiple &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_flexcolor_template.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[98]"></a>LcdWriteReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcdconf_flexcolor_template.o(i.LcdWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LcdWriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_low
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_flexcolor_template.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1dc]"></a>PROGBAR_SetMinMax</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, progbar.o(i.PROGBAR_SetMinMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = PROGBAR_SetMinMax &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
</UL>

<P><STRONG><a name="[1db]"></a>PROGBAR_SetValue</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, progbar.o(i.PROGBAR_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = PROGBAR_SetValue &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__Value2Pos
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
</UL>

<P><STRONG><a name="[37e]"></a>PROGBAR__GetTextRect</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, progbar.o(i.PROGBAR__GetTextRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = PROGBAR__GetTextRect &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
</UL>

<P><STRONG><a name="[37b]"></a>PROGBAR__Value2Pos</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, progbar.o(i.PROGBAR__Value2Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PROGBAR__Value2Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
</UL>

<P><STRONG><a name="[65]"></a>SAI2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SAI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SAI2_IRQHandler &rArr; HAL_SAI_IRQHandler &rArr; HAL_SAI_Abort &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>SC_AnswerReq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hal_smartcard_stm32l4.o(i.SC_AnswerReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SC_AnswerReq &rArr; iso7816_get_atr &rArr; HAL_SMARTCARD_Receive &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_Reset
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_get_atr
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_decode_atr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOpen
</UL>

<P><STRONG><a name="[1c6]"></a>SC_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_smartcard_stm32l4.o(i.SC_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceClose
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_AnswerReq
</UL>

<P><STRONG><a name="[4b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SDMMC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = SDMMC1_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[383]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[386]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdAppOperCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[306]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[388]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[389]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdGoIdleState
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[38a]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 108 bytes, Stack size 36 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDMMC_CmdOperCond
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[308]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[309]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[38b]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[38c]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdSendCID
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[38e]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdSendCSD
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[38f]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[2f5]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[390]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2f8]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[30b]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[30c]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[307]"></a>SDMMC_ConfigData</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[397]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2f6]"></a>SDMMC_GetResponse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2f3]"></a>SDMMC_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[302]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2fd]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[384]"></a>SDMMC_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[2fc]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[1ab]"></a>ST7789H2_SetCursor</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, st7789.o(i.ST7789H2_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ST7789H2_SetCursor &rArr; ST7789H2_WriteReg &rArr; LcdWriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[1ac]"></a>ST7789H2_WriteReg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, st7789.o(i.ST7789H2_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ST7789H2_WriteReg &rArr; LcdWriteReg &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteReg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[3a1]"></a>SystemClock_Config</STRONG> (Thumb, 214 bytes, Stack size 248 bytes, soc_init.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_MCOConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[75]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[320]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[32e]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[322]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[339]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32l4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[329]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[4e]"></a>UART4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[34e]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[34f]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[34d]"></a>UART_SetConfig</STRONG> (Thumb, 652 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[3a6]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[40]"></a>USART2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; HAL_SMARTCARD_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l496xx_keil.o(RESET)
</UL>
<P><STRONG><a name="[268]"></a>WM_Activate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm.o(i.WM_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[3a9]"></a>WM_BringToBottom</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, wm_lib.o(i.WM_BringToBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[3ac]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, wm.o(i.WM_CreateWindowAsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[26a]"></a>WM_Deactivate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm.o(i.WM_Deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = WM_Deactivate &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[3b0]"></a>WM_DefaultProc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm.o(i.WM_DefaultProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>

<P><STRONG><a name="[3b3]"></a>WM_DeleteWindow</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, wm.o(i.WM_DeleteWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = WM_DeleteWindow &rArr; WM_NotifyParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
</UL>

<P><STRONG><a name="[3b8]"></a>WM_DisableMemdev</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_memdev.o(i.WM_DisableMemdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = WM_DisableMemdev &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[3b9]"></a>WM_EnableMemdev</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_memdev.o(i.WM_EnableMemdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = WM_EnableMemdev &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
</UL>

<P><STRONG><a name="[248]"></a>WM_Exec</STRONG> (Thumb, 900 bytes, Stack size 208 bytes, wm.o(i.WM_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
</UL>

<P><STRONG><a name="[256]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_lib.o(i.WM_GetDesktopWindow))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[1d9]"></a>WM_GetDialogItem</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, wm_lib.o(i.WM_GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = WM_GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
</UL>

<P><STRONG><a name="[3be]"></a>WM_GetFirstChild</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = WM_GetFirstChild &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[3bf]"></a>WM_GetParent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(i.WM_GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>

<P><STRONG><a name="[282]"></a>WM_GetWindowOrgX</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_lib.o(i.WM_GetWindowOrgX))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowOrgX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[1df]"></a>WM_HideWindow</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_hide.o(i.WM_HideWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = WM_HideWindow &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
</UL>

<P><STRONG><a name="[25e]"></a>WM_Init</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, wm.o(i.WM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[37c]"></a>WM_InvalidateRect</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, wm.o(i.WM_InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetValue
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[37a]"></a>WM_InvalidateWindow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM_InvalidateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetMinMax
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
</UL>

<P><STRONG><a name="[3c5]"></a>WM_InvalidateWindowAndDescs</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wm_lib.o(i.WM_InvalidateWindowAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescs &rArr;  WM_InvalidateWindowAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
</UL>

<P><STRONG><a name="[3c6]"></a>WM_InvalidateWindowAndDescsEx</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, wm.o(i.WM_InvalidateWindowAndDescsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescsEx &rArr;  WM_InvalidateWindowAndDescsEx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[3c7]"></a>WM_MoveWindow</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_move.o(i.WM_MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>

<P><STRONG><a name="[3b5]"></a>WM_NotifyParent</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, wm_lib.o(i.WM_NotifyParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = WM_NotifyParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[291]"></a>WM_OnKey</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, wm_lib.o(i.WM_OnKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[3c9]"></a>WM_ResizeWindow</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, wm_lib.o(i.WM_ResizeWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
</UL>

<P><STRONG><a name="[3ae]"></a>WM_SelectWindow</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wm.o(i.WM_SelectWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = WM_SelectWindow &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Main
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[3bc]"></a>WM_SendMessage</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm.o(i.WM_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[3cc]"></a>WM_SendMessageNoPara</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_lib.o(i.WM_SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = WM_SendMessageNoPara &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[3b2]"></a>WM_SendToParent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_lib.o(i.WM_SendToParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[1a9]"></a>WM_SetCreateFlags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_lib.o(i.WM_SetCreateFlags))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_init
</UL>

<P><STRONG><a name="[280]"></a>WM_SetSize</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_lib.o(i.WM_SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[1da]"></a>WM_ShowWindow</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wm_lib.o(i.WM_ShowWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = WM_ShowWindow &rArr; WM_InvalidateWindowAndDescs &rArr;  WM_InvalidateWindowAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
</UL>

<P><STRONG><a name="[3cd]"></a>WM__ActivateClipRect</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, wm.o(i.WM__ActivateClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[3c0]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm__private.o(i.WM__AddCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[3ba]"></a>WM__ClipAtParentBorders</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm.o(i.WM__ClipAtParentBorders))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__ClipAtParentBorders
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[3b4]"></a>WM__DeleteAssocTimer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wm_timer.o(i.WM__DeleteAssocTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = WM__DeleteAssocTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[3b1]"></a>WM__GetClientRectEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm__private.o(i.WM__GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__GetClientRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[3ce]"></a>WM__GetClientRectWin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm.o(i.WM__GetClientRectWin))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>

<P><STRONG><a name="[231]"></a>WM__GetNextIVR</STRONG> (Thumb, 818 bytes, Stack size 72 bytes, wm.o(i.WM__GetNextIVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
</UL>

<P><STRONG><a name="[3aa]"></a>WM__GetPrevSibling</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm__private.o(i.WM__GetPrevSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = WM__GetPrevSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[230]"></a>WM__InitIVRSearch</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, wm.o(i.WM__InitIVRSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
</UL>

<P><STRONG><a name="[3ad]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, wm.o(i.WM__InsertWindowIntoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__InsertWindowIntoList
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[3c1]"></a>WM__InvalidateDrawAndDescs</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateDrawAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateDrawAndDescs &rArr;  WM__InvalidateDrawAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[3d2]"></a>WM__InvalidateParent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__InvalidateParent
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[3b7]"></a>WM__InvalidateRect</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, wm.o(i.WM__InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[3ab]"></a>WM__InvalidateRectEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM__InvalidateRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[3c8]"></a>WM__MoveWindow</STRONG> (Thumb, 256 bytes, Stack size 128 bytes, wm_move.o(i.WM__MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>

<P><STRONG><a name="[a1]"></a>WM__Paint1</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, wm.o(i.WM__Paint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = WM__Paint1 &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wm.o(i.WM__PaintWinAndOverlays)
<LI> wm.o(i._PaintTransChildren)
</UL>
<P><STRONG><a name="[3af]"></a>WM__SendMessage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm__private.o(i.WM__SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[278]"></a>WM__SendMessageNoPara</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, wm__private.o(i.WM__SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__SendMessageNoPara
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[3cb]"></a>WM__SendMsgNoData</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, wm.o(i.WM__SendMsgNoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[3ca]"></a>WM__UpdateChildPositions</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, wm__private.o(i.WM__UpdateChildPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[2c3]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soc_init.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_fb
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_MspInit
</UL>

<P><STRONG><a name="[3dd]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[563]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_request
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_other_sensor
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_G_sensor
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ps_data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mag_data
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_humi_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baro_data
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_als_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_data
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_other_sensor
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_G_sensor
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GET_ALL_WIFI_SSID
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTransmit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOpen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_report_demo
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se2
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_task
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_i2c_init
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgf_init
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_upgrade
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hint_percent
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_slprt
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_init
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dbg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcmi_dir
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_up_cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recover_factory_func
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t0_send_command_recv_status
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_AnswerReq
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_get_atr
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>

<P><STRONG><a name="[564]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[565]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3df]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[566]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1e7]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GET_ALL_WIFI_SSID
</UL>

<P><STRONG><a name="[567]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[568]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[3e0]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[569]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[39d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_images_index
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[56a]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[56b]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3e1]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[56c]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[56d]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[56e]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[458]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
</UL>

<P><STRONG><a name="[411]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
</UL>

<P><STRONG><a name="[56f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[3d8]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[3d9]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[570]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[571]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[572]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3ec]"></a>abs_cali_data_register</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, abs_data_model.o(i.abs_cali_data_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = abs_cali_data_register &rArr; abs_data_get_obj_index
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_get_obj_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cali_example_example_init
</UL>

<P><STRONG><a name="[3ee]"></a>abs_data_cali_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, abs_data_model.o(i.abs_data_cali_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = abs_data_cali_init &rArr; cali_example_example_init &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cali_example_example_init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_main
</UL>

<P><STRONG><a name="[3f2]"></a>abs_data_close</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, abs_data_model.o(i.abs_data_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = abs_data_close &rArr; aos_timer_stop &rArr; krhino_timer_stop &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_get_obj_index
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_unsubscribe
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_dispatcher
</UL>

<P><STRONG><a name="[3f6]"></a>abs_data_dev_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, abs_data_model.o(i.abs_data_dev_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = abs_data_dev_enable &rArr; aos_timer_start &rArr; krhino_timer_start &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_dispatcher
</UL>

<P><STRONG><a name="[3f8]"></a>abs_data_ioctl</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, abs_data_model.o(i.abs_data_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = abs_data_ioctl &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_dispatcher
</UL>

<P><STRONG><a name="[3f9]"></a>abs_data_model_init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, abs_data_model.o(i.abs_data_model_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = abs_data_model_init &rArr; aos_timer_new_ext &rArr; krhino_timer_dyn_create &rArr; timer_create &rArr; krhino_timer_start &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_main
</UL>

<P><STRONG><a name="[3fb]"></a>abs_data_open</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, abs_data_model.o(i.abs_data_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = abs_data_open &rArr; aos_timer_change &rArr; krhino_timer_change &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_get_obj_index
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_create_obj_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_subscribe
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_dispatcher
</UL>

<P><STRONG><a name="[3fd]"></a>abs_data_read</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, abs_data_model.o(i.abs_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = abs_data_read &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_get_obj_index
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_dispatcher
</UL>

<P><STRONG><a name="[213]"></a>aos_close</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, vfs.o(i.aos_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_close &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_model_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_other_sensor
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_G_sensor
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[402]"></a>aos_closedir</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, vfs.o(i.aos_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_closedir &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcmi_dir
</UL>

<P><STRONG><a name="[403]"></a>aos_framework_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.aos_framework_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = aos_framework_init &rArr; uData_main &rArr; abs_data_model_init &rArr; aos_timer_new_ext &rArr; krhino_timer_dyn_create &rArr; timer_create &rArr; krhino_timer_start &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_main
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[406]"></a>aos_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_fs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_unlink
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_stat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_rename
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_opendir
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_open
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_mkdir
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_dev_register
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_closedir
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_close
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>

<P><STRONG><a name="[54b]"></a>aos_get_app_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, version.o(i.aos_get_app_version))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_init
</UL>

<P><STRONG><a name="[3f3]"></a>aos_ioctl</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, vfs.o(i.aos_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_model_init
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_ioctl
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_close
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_add_event
</UL>

<P><STRONG><a name="[408]"></a>aos_kernel_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aos_init.o(i.aos_kernel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = aos_kernel_init &rArr; sensor_init &rArr; sensor_brd_init &rArr; drv_baro_bosch_bmp280_init &rArr; drv_baro_bosch_bmp280_get_calib_param &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_framework_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_task
</UL>

<P><STRONG><a name="[40d]"></a>aos_loop_run</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, yloop.o(i.aos_loop_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = aos_loop_run &rArr; aos_poll &rArr; aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_empty
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[3e5]"></a>aos_malloc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_create_obj_ctx
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_event_filter
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_opendir
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_open
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_dev_register
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[413]"></a>aos_mkdir</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, vfs.o(i.aos_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aos_mkdir &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcmi_dir
</UL>

<P><STRONG><a name="[416]"></a>aos_mutex_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
</UL>

<P><STRONG><a name="[418]"></a>aos_mutex_is_valid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_mutex_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aos_mutex_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_i2c_init
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_slprt
</UL>

<P><STRONG><a name="[3e4]"></a>aos_mutex_lock</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = aos_mutex_lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_poll
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_request
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_unlink
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_opendir
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mkdir
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_closedir
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_slprt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_stat
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_fs
</UL>

<P><STRONG><a name="[41a]"></a>aos_mutex_new</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, aos_rhino.o(i.aos_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_open
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_i2c_init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
</UL>

<P><STRONG><a name="[3e7]"></a>aos_mutex_unlock</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_poll
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_request
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_unlink
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_opendir
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mkdir
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_closedir
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_slprt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_stat
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_fs
</UL>

<P><STRONG><a name="[3f0]"></a>aos_now_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_now_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cali_example_example_init
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_read
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_model_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_cali_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_timer_process
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_create_obj_ctx
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_framework_init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_main
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_subscribe
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_mgr_init
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_get_report_pkg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cali_example_process_cb
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_open
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_ioctl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_close
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_read
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_open
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_ioctl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_close
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_open
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_close
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_open
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_ioctl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_close
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_ioctl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_open
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_ioctl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_close
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_ioctl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_close
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_read
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_open
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_ioctl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_close
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_read
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_ioctl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_close
</UL>

<P><STRONG><a name="[210]"></a>aos_open</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, vfs.o(i.aos_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aos_open &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_model_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_other_sensor
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_G_sensor
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[41b]"></a>aos_opendir</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, vfs.o(i.aos_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aos_opendir &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dcmi_dir
</UL>

<P><STRONG><a name="[410]"></a>aos_poll</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, vfs.o(i.aos_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = aos_poll &rArr; aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_poll
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
</UL>

<P><STRONG><a name="[3ff]"></a>aos_post_event</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, local_event.o(i.aos_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aos_post_event &rArr; input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_add_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_timer_process
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_process
</UL>

<P><STRONG><a name="[3fe]"></a>aos_read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vfs.o(i.aos_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aos_read
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_temp_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ps_data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mag_data
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_humi_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_data
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baro_data
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_als_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_data
</UL>

<P><STRONG><a name="[421]"></a>aos_register_driver</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, vfs_register.o(i.aos_register_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = aos_register_driver &rArr; inode_reserve &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_device_init
</UL>

<P><STRONG><a name="[423]"></a>aos_register_event_filter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, local_event.o(i.aos_register_event_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aos_register_event_filter &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_mgr_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[424]"></a>aos_register_fs</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, vfs_register.o(i.aos_register_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = aos_register_fs &rArr; inode_reserve &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_dev_register
</UL>

<P><STRONG><a name="[41f]"></a>aos_sem_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = aos_sem_free &rArr; aos_free &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[426]"></a>aos_sem_is_valid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aos_rhino.o(i.aos_sem_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aos_sem_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[41c]"></a>aos_sem_new</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, aos_rhino.o(i.aos_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[343]"></a>aos_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aos_rhino.o(i.aos_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_poll_notify
</UL>

<P><STRONG><a name="[41e]"></a>aos_sem_wait</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = aos_sem_wait &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; ready_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[42a]"></a>aos_stat</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, vfs.o(i.aos_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = aos_stat &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_images_index
</UL>

<P><STRONG><a name="[212]"></a>aos_sync</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vfs.o(i.aos_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aos_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
</UL>

<P><STRONG><a name="[42b]"></a>aos_task_getspecific</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_task_getspecific))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = aos_task_getspecific &rArr; krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
</UL>

<P><STRONG><a name="[42d]"></a>aos_task_setspecific</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_task_setspecific))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_context
</UL>

<P><STRONG><a name="[3fc]"></a>aos_timer_change</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, aos_rhino.o(i.aos_timer_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = aos_timer_change &rArr; krhino_timer_change &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
</UL>

<P><STRONG><a name="[3fa]"></a>aos_timer_new_ext</STRONG> (Thumb, 328 bytes, Stack size 80 bytes, aos_rhino.o(i.aos_timer_new_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = aos_timer_new_ext &rArr; krhino_timer_dyn_create &rArr; timer_create &rArr; krhino_timer_start &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_model_init
</UL>

<P><STRONG><a name="[3f7]"></a>aos_timer_start</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_timer_start &rArr; krhino_timer_start &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_dev_enable
</UL>

<P><STRONG><a name="[3f4]"></a>aos_timer_stop</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, aos_rhino.o(i.aos_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = aos_timer_stop &rArr; krhino_timer_stop &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_close
</UL>

<P><STRONG><a name="[39e]"></a>aos_unlink</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, vfs.o(i.aos_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = aos_unlink &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_open
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[211]"></a>aos_write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vfs.o(i.aos_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aos_write
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[40c]"></a>application_start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main_1.o(i.application_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = application_start &rArr; uData_subscribe &rArr; uData_service_subscribe &rArr; abs_data_open &rArr; aos_timer_change &rArr; krhino_timer_change &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_subscribe
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_event_filter
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[1e3]"></a>at_cmd_request</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, atdemo.o(i.at_cmd_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = at_cmd_request &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_GET_ALL_WIFI_SSID
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
</UL>

<P><STRONG><a name="[437]"></a>audio_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, audio.o(i.audio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = audio_init &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_is_valid
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_is_valid
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[3ef]"></a>cali_example_example_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, calibrated_example_algo.o(i.cali_example_example_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cali_example_example_init &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_cali_data_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_cali_init
</UL>

<P><STRONG><a name="[ba]"></a>cali_example_process_cb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, calibrated_example_algo.o(i.cali_example_process_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cali_example_process_cb &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calibrated_example_algo.o(i.cali_example_example_init)
</UL>
<P><STRONG><a name="[1bb]"></a>camera_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, camera_demo.o(i.camera_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = camera_close &rArr; HAL_DCMI_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
</UL>

<P><STRONG><a name="[1ce]"></a>camera_dispaly</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, st7789.o(i.camera_dispaly))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = camera_dispaly &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_fb
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC0329_CAMERA_FrameEventCallback
</UL>

<P><STRONG><a name="[202]"></a>camera_open</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, camera_demo.o(i.camera_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = camera_open &rArr; HAL_DCMI_Start_DMA &rArr; DCMI_TransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
</UL>

<P><STRONG><a name="[203]"></a>camera_to_sd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, camera_demo.o(i.camera_to_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = camera_to_sd &rArr; SavePicture &rArr; GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Suspend
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Resume
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
</UL>

<P><STRONG><a name="[443]"></a>core_sched</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, k_sched.o(i.core_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = core_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_switch
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[53a]"></a>cpu_task_stack_init</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, port_c.o(i.cpu_task_stack_init))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[450]"></a>crc16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, crc16.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = crc16 &rArr; crc16ccitt &rArr; crc16common
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_payload
</UL>

<P><STRONG><a name="[451]"></a>crc16ccitt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, crc16.o(i.crc16ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = crc16ccitt &rArr; crc16common
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16common
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>

<P><STRONG><a name="[452]"></a>crc16common</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, crc16.o(i.crc16common))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crc16common
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16ccitt
</UL>

<P><STRONG><a name="[3f1]"></a>csp_printf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, log.o(i.csp_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = csp_printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cali_example_example_init
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_read
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_model_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_cali_init
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_framework_init
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_main
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_subscribe
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_mgr_init
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_get_report_pkg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cali_example_process_cb
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_open
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_ioctl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_close
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_open
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_ioctl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_close
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_open
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_ioctl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_close
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_open
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_ioctl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_close
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_ioctl
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_open
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_ioctl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_close
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_ioctl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_close
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_open
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_ioctl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_close
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_ioctl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_close
</UL>

<P><STRONG><a name="[f4]"></a>daemon_task</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main_1.o(i.daemon_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = daemon_task &rArr; isd9160_loop_once &rArr; handle_slprt &rArr; isd9160_slprt_size &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_toggle
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_loop_once
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[f2]"></a>demo_task</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main_1.o(i.demo_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = demo_task &rArr; GUIDEMO_Main &rArr; _Main &rArr; GUIDEMO_Version_Info &rArr; GUIDEMO_GET_ALL_WIFI_SSID &rArr; at_cmd_request &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_register
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[46a]"></a>drv_acc_st_lsm6dsl_init</STRONG> (Thumb, 182 bytes, Stack size 104 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = drv_acc_st_lsm6dsl_init &rArr; lsm6dsl_sw_reset &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_sw_reset
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_set_default_config
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_gyro_temp_st_lsm6dsl_validate_id
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_brd_init
</UL>

<P><STRONG><a name="[474]"></a>drv_als_liteon_ltr553_init</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = drv_als_liteon_ltr553_init &rArr; drv_als_ps_liteon_ltr553_validate_id &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_ps_liteon_ltr553_validate_id
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_set_default_config
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_brd_init
</UL>

<P><STRONG><a name="[47a]"></a>drv_baro_bosch_bmp280_init</STRONG> (Thumb, 214 bytes, Stack size 112 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = drv_baro_bosch_bmp280_init &rArr; drv_baro_bosch_bmp280_get_calib_param &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_power_mode
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_odr
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_get_calib_param
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_brd_init
</UL>

<P><STRONG><a name="[47e]"></a>drv_gyro_st_lsm6dsl_init</STRONG> (Thumb, 252 bytes, Stack size 112 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = drv_gyro_st_lsm6dsl_init &rArr; lsm6dsl_sw_reset &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_sw_reset
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_band_pass_set
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_gyro_temp_st_lsm6dsl_validate_id
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_brd_init
</UL>

<P><STRONG><a name="[480]"></a>drv_humi_sensirion_shtc1_init</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = drv_humi_sensirion_shtc1_init &rArr; sensor_create_obj &rArr; aos_register_driver &rArr; inode_reserve &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_humi_sensirion_shtc1_validate_id
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_brd_init
</UL>

<P><STRONG><a name="[483]"></a>drv_mag_memsic_mmc3680kj_init</STRONG> (Thumb, 186 bytes, Stack size 112 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = drv_mag_memsic_mmc3680kj_init &rArr; mmc3680kj_get_comp_matrix &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_validate_id
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_set_pulse_width
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_get_comp_matrix
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_check_otp
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_brd_init
</UL>

<P><STRONG><a name="[48b]"></a>drv_ps_liteon_ltr553_init</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = drv_ps_liteon_ltr553_init &rArr; drv_als_ps_liteon_ltr553_validate_id &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_set_default_config
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_ps_liteon_ltr553_validate_id
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_brd_init
</UL>

<P><STRONG><a name="[492]"></a>drv_temp_sensirion_shtc1_init</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = drv_temp_sensirion_shtc1_init &rArr; sensor_create_obj &rArr; aos_register_driver &rArr; inode_reserve &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_humi_sensirion_shtc1_validate_id
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_brd_init
</UL>

<P><STRONG><a name="[ee]"></a>dyn_mem_proc_task</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, k_dyn_mem_proc.o(i.dyn_mem_proc_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = dyn_mem_proc_task &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_dyn_mem_proc.o(i.dyn_mem_proc_task_start)
</UL>
<P><STRONG><a name="[493]"></a>dyn_mem_proc_task_start</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, k_dyn_mem_proc.o(i.dyn_mem_proc_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = dyn_mem_proc_task_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[257]"></a>emWin_LCD_Init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lcd.o(i.emWin_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = emWin_LCD_Init &rArr; LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[496]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_close
</UL>

<P><STRONG><a name="[499]"></a>f_closedir</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = f_closedir &rArr; validate &rArr; ff_disk_status &rArr; SDMMC_status &rArr; hal_sd_stat_get &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_closedir
</UL>

<P><STRONG><a name="[49a]"></a>f_lseek</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_lseek
</UL>

<P><STRONG><a name="[49c]"></a>f_mkdir</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = f_mkdir &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_mkdir
</UL>

<P><STRONG><a name="[4a3]"></a>f_mkfs</STRONG> (Thumb, 1358 bytes, Stack size 88 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = f_mkfs &rArr; ff_disk_initialize &rArr; hal_sd_init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_write
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_ioctl
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_dev_register
</UL>

<P><STRONG><a name="[4a8]"></a>f_mount</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = f_mount &rArr; find_volume &rArr; ff_disk_initialize &rArr; hal_sd_init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_dev_register
</UL>

<P><STRONG><a name="[4a9]"></a>f_open</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_open
</UL>

<P><STRONG><a name="[4ac]"></a>f_opendir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_opendir
</UL>

<P><STRONG><a name="[4ad]"></a>f_read</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_read
</UL>

<P><STRONG><a name="[4ae]"></a>f_readdir</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_readdir
</UL>

<P><STRONG><a name="[4b0]"></a>f_rename</STRONG> (Thumb, 262 bytes, Stack size 152 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = f_rename &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_rename
</UL>

<P><STRONG><a name="[4b1]"></a>f_stat</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_stat
</UL>

<P><STRONG><a name="[497]"></a>f_sync</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_sync
</UL>

<P><STRONG><a name="[4b2]"></a>f_unlink</STRONG> (Thumb, 156 bytes, Stack size 112 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_unlink
</UL>

<P><STRONG><a name="[4b3]"></a>f_write</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_write
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_write
</UL>

<P><STRONG><a name="[45d]"></a>fatfs_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfs.o(i.fatfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = fatfs_register &rArr; fatfs_dev_register &rArr; f_mkfs &rArr; ff_disk_initialize &rArr; hal_sd_init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_dev_register
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_task
</UL>

<P><STRONG><a name="[4a5]"></a>ff_disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.ff_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ff_disk_initialize &rArr; hal_sd_init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[4a6]"></a>ff_disk_ioctl</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, diskio.o(i.ff_disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ff_disk_ioctl &rArr; SDMMC_ioctl &rArr; SDMMC_status &rArr; hal_sd_stat_get &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_dev_register
</UL>

<P><STRONG><a name="[49b]"></a>ff_disk_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, diskio.o(i.ff_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ff_disk_read &rArr; hal_sd_blks_read &rArr; HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_blks_read
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[4b9]"></a>ff_disk_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, diskio.o(i.ff_disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ff_disk_status &rArr; SDMMC_status &rArr; hal_sd_stat_get &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_status
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[461]"></a>ff_disk_write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, diskio.o(i.ff_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_blks_write
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[4bb]"></a>fgetc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, soc_init.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = fgetc &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[b5]"></a>fputc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, soc_init.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fputc &rArr; hal_uart_send &rArr; krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[537]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_create_obj
</UL>

<P><STRONG><a name="[5]"></a>gc0329_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gc0329.o(i.gc0329_Config))
<BR>[Address Reference Count : 1]<UL><LI> gc0329.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>gc0329_Init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gc0329.o(i.gc0329_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = gc0329_Init &rArr; CAMERA_IO_Write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gc0329.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>gc0329_ReadID</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gc0329.o(i.gc0329_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gc0329_ReadID &rArr; CAMERA_IO_Write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Write
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gc0329.o(.data)
</UL>
<P><STRONG><a name="[1b6]"></a>gc0329_power_onoff</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gc0329.o(i.gc0329_power_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = gc0329_power_onoff &rArr; krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_low
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_high
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
</UL>

<P><STRONG><a name="[4c2]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = getc &rArr; fgetc &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
</UL>

<P><STRONG><a name="[4c3]"></a>gpio_get_int_num</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, hal_gpio_stm32l4.o(i.gpio_get_int_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_get_int_num
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_para_transform
</UL>

<P><STRONG><a name="[4c5]"></a>gpio_has_priv</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hal_gpio_stm32l4.o(i.gpio_has_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_has_priv &rArr; hal_gpio_output_low &rArr; get_gpio_group
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_low
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_high
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_para_transform
</UL>

<P><STRONG><a name="[4c7]"></a>hal_gpio_init</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, hal_gpio_stm32l4.o(i.hal_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hal_gpio_init &rArr; gpio_para_transform &rArr; gpio_has_priv &rArr; hal_gpio_output_low &rArr; get_gpio_group
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_para_transform
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_pin
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_group
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[370]"></a>hal_gpio_output_high</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_gpio_stm32l4.o(i.hal_gpio_output_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_gpio_output_high &rArr; get_gpio_group
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_pin
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_group
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteData
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_reset
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_reset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_power_onoff
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_has_priv
</UL>

<P><STRONG><a name="[371]"></a>hal_gpio_output_low</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_gpio_stm32l4.o(i.hal_gpio_output_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_gpio_output_low &rArr; get_gpio_group
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_pin
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_group
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWriteReg
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_reset
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_reset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_power_onoff
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_has_priv
</UL>

<P><STRONG><a name="[459]"></a>hal_gpio_output_toggle</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_gpio_stm32l4.o(i.hal_gpio_output_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_gpio_output_toggle &rArr; get_gpio_group
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_pin
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gpio_group
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daemon_task
</UL>

<P><STRONG><a name="[4ca]"></a>hal_i2c_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_i2c_stm32l4.o(i.hal_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = hal_i2c_init &rArr; I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[491]"></a>hal_i2c_master_recv</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_i2c_stm32l4.o(i.hal_i2c_master_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_slprt_size
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_slprt
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgresp
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_result_read
</UL>

<P><STRONG><a name="[48e]"></a>hal_i2c_master_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hal_i2c_stm32l4.o(i.hal_i2c_master_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_i2c_master_send &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_upgrade
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_payload
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_binsize
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_slprt_size
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgresp
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_cmd_write
</UL>

<P><STRONG><a name="[1ae]"></a>hal_i2c_mem_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, hal_i2c_stm32l4.o(i.hal_i2c_mem_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Read
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>

<P><STRONG><a name="[1b0]"></a>hal_i2c_mem_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, hal_i2c_stm32l4.o(i.hal_i2c_mem_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Write
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
</UL>

<P><STRONG><a name="[4b8]"></a>hal_sd_blks_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_sd_stm32l4.o(i.hal_sd_blks_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = hal_sd_blks_read &rArr; HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_read
</UL>

<P><STRONG><a name="[4ba]"></a>hal_sd_blks_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_sd_stm32l4.o(i.hal_sd_blks_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_write
</UL>

<P><STRONG><a name="[394]"></a>hal_sd_info_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_sd_stm32l4.o(i.hal_sd_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ioctl
</UL>

<P><STRONG><a name="[4b7]"></a>hal_sd_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hal_sd_stm32l4.o(i.hal_sd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = hal_sd_init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_initialize
</UL>

<P><STRONG><a name="[395]"></a>hal_sd_stat_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_sd_stm32l4.o(i.hal_sd_stat_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hal_sd_stat_get &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_status
</UL>

<P><STRONG><a name="[4cb]"></a>hal_uart_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hal_uart_stm32l4.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = hal_uart_init &rArr; uart4_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[436]"></a>hal_uart_recv</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, hal_uart_stm32l4.o(i.hal_uart_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT_Buf_Queue_1byte
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_at
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_scan_func
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_mac_func
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_sta_quit_func
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_firmware_version_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_ap_quit_func
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_test
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_run_time_func
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_memory_free_func
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_info_start_func
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_scan_option_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_power_save_func
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_event_notification_func
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_dhcp_func
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_ip_mask_gate_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_info_start_func
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_info_func
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_fomat_func
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_echo_func
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_flash_lock_func
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_info_func
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_scan_option_func
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_power_save_func
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_event_notification_func
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_dhcp_func
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_ip_mask_gate_func
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_info_func
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_info_func
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_fomat_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_echo_func
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_flash_lock_func
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_cip_recv_cfg_func
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recover_factory_func
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reboot_func
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_sta_current_status_func
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion_old
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ap_current_status_func
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fota_start_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_send_raw_func
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_recv_cfg_func
</UL>

<P><STRONG><a name="[435]"></a>hal_uart_send</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hal_uart_stm32l4.o(i.hal_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_uart_send &rArr; krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_at
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_scan_func
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_mac_func
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_sta_quit_func
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_firmware_version_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_ap_quit_func
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_test
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_run_time_func
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_memory_free_func
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_info_start_func
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_scan_option_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_power_save_func
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_event_notification_func
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_dhcp_func
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_ip_mask_gate_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_info_start_func
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_info_func
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_fomat_func
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_echo_func
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_flash_lock_func
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_info_func
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_scan_option_func
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_power_save_func
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_event_notification_func
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_dhcp_func
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_ip_mask_gate_func
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_info_func
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_info_func
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_fomat_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_echo_func
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_flash_lock_func
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_cip_recv_cfg_func
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recover_factory_func
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reboot_func
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_sta_current_status_func
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion_old
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ap_current_status_func
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fota_start_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_send_raw_func
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_recv_cfg_func
</UL>

<P><STRONG><a name="[2cb]"></a>handing_shake</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main_1.o(i.handing_shake))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = handing_shake &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1fe]"></a>handle_upgrade</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, isd9160.o(i.handle_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = handle_upgrade &rArr; send_upgrade &rArr; request_payload &rArr; get_upgresp &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_is_valid
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgf_init
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_upgrade
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
</UL>

<P><STRONG><a name="[ef]"></a>idle_task</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_idle.o(i.idle_task))
<BR><BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_sys.o(i.krhino_init)
</UL>
<P><STRONG><a name="[1b7]"></a>init_dcmi_dir</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, camera_demo.o(i.init_dcmi_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = init_dcmi_dir &rArr; aos_opendir &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_opendir
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mkdir
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_closedir
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
</UL>

<P><STRONG><a name="[4d7]"></a>inode_alloc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[4d6]"></a>inode_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfs_inode.o(i.inode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfs_init
</UL>

<P><STRONG><a name="[414]"></a>inode_open</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, vfs_inode.o(i.inode_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inode_open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_unlink
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_opendir
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mkdir
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_stat
</UL>

<P><STRONG><a name="[4d8]"></a>inode_ptr_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_ptr_get))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_reserve
</UL>

<P><STRONG><a name="[525]"></a>inode_ref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_ref))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_file
</UL>

<P><STRONG><a name="[422]"></a>inode_reserve</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, vfs_inode.o(i.inode_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = inode_reserve &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_ptr_get
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_alloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_fs
</UL>

<P><STRONG><a name="[45b]"></a>inode_unref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vfs_inode.o(i.inode_unref))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_file
</UL>

<P><STRONG><a name="[4dd]"></a>irda_init</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, irda.o(i.irda_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = irda_init &rArr; aos_sem_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[20b]"></a>irda_loopback_test</STRONG> (Thumb, 362 bytes, Stack size 128 bytes, irda.o(i.irda_loopback_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = irda_loopback_test &rArr; ir_delay &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ir
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_match_lead
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_delay
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dbg
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
</UL>

<P><STRONG><a name="[4e1]"></a>isd9160_i2c_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, isd9160.o(i.isd9160_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = isd9160_i2c_init &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_is_valid
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_reset
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[45a]"></a>isd9160_loop_once</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, isd9160.o(i.isd9160_loop_once))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = isd9160_loop_once &rArr; handle_slprt &rArr; isd9160_slprt_size &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_slprt
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daemon_task
</UL>

<P><STRONG><a name="[4e2]"></a>isd9160_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, isd9160.o(i.isd9160_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = isd9160_reset &rArr; krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_low
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_high
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_i2c_init
</UL>

<P><STRONG><a name="[44d]"></a>k_err_proc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_err.o(i.k_err_proc))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[4e3]"></a>k_mm_alloc</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, k_mm.o(i.k_mm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_bitmap_clear
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_block
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last_bit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_search
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>

<P><STRONG><a name="[4e5]"></a>k_mm_free</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, k_mm.o(i.k_mm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_block
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_search
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</UL>

<P><STRONG><a name="[4e7]"></a>k_mm_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, k_mm.o(i.k_mm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = k_mm_init &rArr; krhino_add_mm_region &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[4f4]"></a>kobj_list_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, k_stats.o(i.kobj_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[4e9]"></a>krhino_add_mm_region</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, k_mm.o(i.krhino_add_mm_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = krhino_add_mm_region &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[4ec]"></a>krhino_buf_queue_create</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, k_buf_queue.o(i.krhino_buf_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = krhino_buf_queue_create &rArr; buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_init
</UL>

<P><STRONG><a name="[351]"></a>krhino_buf_queue_recv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, k_buf_queue.o(i.krhino_buf_queue_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_empty
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT_Buf_Queue_1byte
</UL>

<P><STRONG><a name="[3a8]"></a>krhino_buf_queue_send</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_buf_queue.o(i.krhino_buf_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = krhino_buf_queue_send &rArr; buf_queue_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_Buf_Queue
</UL>

<P><STRONG><a name="[2a2]"></a>krhino_cur_task_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, k_task.o(i.krhino_cur_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
</UL>

<P><STRONG><a name="[4f1]"></a>krhino_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, k_sys.o(i.krhino_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = krhino_init &rArr; dyn_mem_proc_task_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task_start
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_init
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kobj_list_init
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runqueue_init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e8]"></a>krhino_init_mm_head</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, k_mm.o(i.krhino_init_mm_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_init_mm_head &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[1bf]"></a>krhino_intrpt_enter</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, k_sys.o(i.krhino_intrpt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>krhino_intrpt_exit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, k_sys.o(i.krhino_intrpt_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_switch
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[4e4]"></a>krhino_mblk_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, k_mm_blk.o(i.krhino_mblk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
</UL>

<P><STRONG><a name="[4ea]"></a>krhino_mblk_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, k_mm_blk.o(i.krhino_mblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
</UL>

<P><STRONG><a name="[4f8]"></a>krhino_mblk_pool_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, k_mm_blk.o(i.krhino_mblk_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_pool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</UL>

<P><STRONG><a name="[412]"></a>krhino_mm_alloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_mm.o(i.krhino_mm_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
</UL>

<P><STRONG><a name="[407]"></a>krhino_mm_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_mm.o(i.krhino_mm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
</UL>

<P><STRONG><a name="[1b9]"></a>krhino_ms_to_ticks</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, k_time.o(i.krhino_ms_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Intro
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_run_cfg_script
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_reset
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_reset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_power_onoff
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_Init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_read
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_sw_reset
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_read_raw_data
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_set
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_enable
</UL>

<P><STRONG><a name="[2a5]"></a>krhino_mutex_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_mutex.o(i.krhino_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_create &rArr; mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>

<P><STRONG><a name="[417]"></a>krhino_mutex_del</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, k_mutex.o(i.krhino_mutex_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>

<P><STRONG><a name="[419]"></a>krhino_mutex_is_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, k_mutex.o(i.krhino_mutex_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_is_valid
</UL>

<P><STRONG><a name="[2a6]"></a>krhino_mutex_lock</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, k_mutex.o(i.krhino_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>

<P><STRONG><a name="[2a7]"></a>krhino_mutex_unlock</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, k_mutex.o(i.krhino_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</UL>

<P><STRONG><a name="[4fe]"></a>krhino_queue_back_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, k_queue.o(i.krhino_queue_back_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
</UL>

<P><STRONG><a name="[500]"></a>krhino_queue_create</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, k_queue.o(i.krhino_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = krhino_queue_create &rArr; queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</UL>

<P><STRONG><a name="[502]"></a>krhino_queue_recv</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, k_queue.o(i.krhino_queue_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[2a4]"></a>krhino_sem_create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_sem.o(i.krhino_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_sem_create &rArr; sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[425]"></a>krhino_sem_del</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, k_sem.o(i.krhino_sem_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = krhino_sem_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
</UL>

<P><STRONG><a name="[428]"></a>krhino_sem_give</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_sem.o(i.krhino_sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[427]"></a>krhino_sem_is_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, k_sem.o(i.krhino_sem_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_is_valid
</UL>

<P><STRONG><a name="[429]"></a>krhino_sem_take</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, k_sem.o(i.krhino_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = krhino_sem_take &rArr; pend_to_blk_obj &rArr; ready_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
</UL>

<P><STRONG><a name="[193]"></a>krhino_stack_ovf_check</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, k_stats.o(i.krhino_stack_ovf_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = krhino_stack_ovf_check
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[506]"></a>krhino_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, k_sys.o(i.krhino_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = krhino_start &rArr; workqueue_init &rArr; krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_first_task_start
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[509]"></a>krhino_sys_tick_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, k_time.o(i.krhino_sys_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>

<P><STRONG><a name="[2a3]"></a>krhino_sys_time_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, k_time.o(i.krhino_sys_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handing_shake
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_delay
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_read
</UL>

<P><STRONG><a name="[4f5]"></a>krhino_task_create</STRONG> (Thumb, 40 bytes, Stack size 64 bytes, k_task.o(i.krhino_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[bb]"></a>krhino_task_deathbed</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, k_task.o(i.krhino_task_deathbed))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_task_deathbed &rArr; krhino_task_dyn_del &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_c.o(i.cpu_task_stack_init)
</UL>
<P><STRONG><a name="[50b]"></a>krhino_task_del</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, k_task.o(i.krhino_task_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_task_del &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</UL>

<P><STRONG><a name="[494]"></a>krhino_task_dyn_create</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, k_task.o(i.krhino_task_dyn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task_start
</UL>

<P><STRONG><a name="[50c]"></a>krhino_task_dyn_del</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, k_task.o(i.krhino_task_dyn_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = krhino_task_dyn_del &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</UL>

<P><STRONG><a name="[42c]"></a>krhino_task_info_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, k_task.o(i.krhino_task_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
</UL>

<P><STRONG><a name="[42e]"></a>krhino_task_info_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, k_task.o(i.krhino_task_info_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
</UL>

<P><STRONG><a name="[514]"></a>krhino_task_resume</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_task.o(i.krhino_task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = krhino_task_resume &rArr; task_resume &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[1ba]"></a>krhino_task_sleep</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, k_task.o(i.krhino_task_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = krhino_task_sleep &rArr; ready_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_to_sd
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_run_cfg_script
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_reset
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOpen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_task
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;daemon_task
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_reset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_power_onoff
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc0329_Init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_at
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_scan_func
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wl_mac_func
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_sta_quit_func
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_firmware_version_func
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_wifi_ap_quit_func
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_test
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_run_time_func
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_system_memory_free_func
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_sta_info_start_func
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_scan_option_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_power_save_func
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_event_notification_func
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_dhcp_func
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_ip_mask_gate_func
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_wifi_ap_info_start_func
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_info_func
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_fomat_func
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_uart_echo_func
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_flash_lock_func
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_ip_mask_gate_dns_func
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_sta_info_func
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_scan_option_func
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_power_save_func
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_event_notification_func
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_dhcp_func
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_ip_mask_gate_func
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_wifi_ap_info_func
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_info_func
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_fomat_func
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_uart_echo_func
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_flash_lock_func
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_refer_cip_recv_cfg_func
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recover_factory_func
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reboot_func
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_sta_current_status_func
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion_old
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_at_verion
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ap_current_status_func
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fota_start_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_send_raw_func
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cip_recv_cfg_func
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_read
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_sw_reset
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_AnswerReq
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_read_raw_data
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_set
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_enable
</UL>

<P><STRONG><a name="[3a0]"></a>krhino_tick_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, k_time.o(i.krhino_tick_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[42f]"></a>krhino_timer_change</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, k_timer.o(i.krhino_timer_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = krhino_timer_change &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_back_send
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
</UL>

<P><STRONG><a name="[430]"></a>krhino_timer_dyn_create</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, k_timer.o(i.krhino_timer_dyn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = krhino_timer_dyn_create &rArr; timer_create &rArr; krhino_timer_start &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
</UL>

<P><STRONG><a name="[431]"></a>krhino_timer_start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, k_timer.o(i.krhino_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_timer_start &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_back_send
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>

<P><STRONG><a name="[432]"></a>krhino_timer_stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, k_timer.o(i.krhino_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_timer_stop &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_back_send
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
</UL>

<P><STRONG><a name="[519]"></a>krhino_workqueue_create</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, k_workqueue.o(i.krhino_workqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_is_exist
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_resume
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_init
</UL>

<P><STRONG><a name="[4f6]"></a>ktimer_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, k_timer.o(i.ktimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ktimer_init &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_create
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[4de]"></a>light_ir</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, irda.o(i.light_ir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = light_ir &rArr; TIM_ForcedOC1Config &rArr; HAL_TIM_OC_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
</UL>

<P><STRONG><a name="[74]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, main_1.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = main &rArr; krhino_init &rArr; dyn_mem_proc_task_start &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4f9]"></a>mutex_create</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, k_mutex.o(i.mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mutex_create
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
</UL>

<P><STRONG><a name="[524]"></a>mutex_pri_look</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, k_mutex.o(i.mutex_pri_look))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[511]"></a>mutex_task_pri_reset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, k_mutex.o(i.mutex_task_pri_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[528]"></a>pend_list_reorder</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, k_pend.o(i.pend_list_reorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_list_reorder &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[4f0]"></a>pend_state_end_proc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, k_pend.o(i.pend_state_end_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_state_end_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[4fb]"></a>pend_task_rm</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, k_pend.o(i.pend_task_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[442]"></a>pend_task_wakeup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, k_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
</UL>

<P><STRONG><a name="[4ef]"></a>pend_to_blk_obj</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, k_pend.o(i.pend_to_blk_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pend_to_blk_obj &rArr; ready_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[44e]"></a>preferred_cpu_ready_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_sched.o(i.preferred_cpu_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</UL>

<P><STRONG><a name="[52a]"></a>ready_list_add</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, k_sched.o(i.ready_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>

<P><STRONG><a name="[52c]"></a>ready_list_add_head</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ready_list_add_head &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[52b]"></a>ready_list_add_tail</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[50e]"></a>ready_list_rm</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[440]"></a>ringbuf_head_push</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, k_ringbuf.o(i.ringbuf_head_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ringbuf_head_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_full
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_compress
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[43d]"></a>ringbuf_init</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, k_ringbuf.o(i.ringbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_create
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>

<P><STRONG><a name="[4ed]"></a>ringbuf_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[533]"></a>ringbuf_is_full</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_head_push
</UL>

<P><STRONG><a name="[4ee]"></a>ringbuf_pop</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, k_ringbuf.o(i.ringbuf_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_empty
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[441]"></a>ringbuf_push</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, k_ringbuf.o(i.ringbuf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_full
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_headlen_compress
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[535]"></a>ringbuf_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_ringbuf.o(i.ringbuf_reset))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
</UL>

<P><STRONG><a name="[4f2]"></a>runqueue_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, k_sched.o(i.runqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[536]"></a>sensor_brd_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, soc_init.o(i.sensor_brd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = sensor_brd_init &rArr; drv_baro_bosch_bmp280_init &rArr; drv_baro_bosch_bmp280_get_calib_param &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
</UL>

<P><STRONG><a name="[46d]"></a>sensor_create_obj</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sensor_hal.o(i.sensor_create_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sensor_create_obj &rArr; aos_register_driver &rArr; inode_reserve &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_init
</UL>

<P><STRONG><a name="[469]"></a>sensor_i2c_read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sensor_drv_api.o(i.sensor_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_mem_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_init
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_set_power_mode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_set_default_config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_read
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_ps_liteon_ltr553_validate_id
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_set_power_mode
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_set_default_config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_read
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_sw_reset
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_is_new_data_available
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_band_pass_set
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_read
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_set_default_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_read
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_gyro_temp_st_lsm6dsl_validate_id
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_validate_id
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_set_pulse_width
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_get_comp_matrix
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_enable
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_check_otp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_read
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_work_mode
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_power_mode
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_odr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_read
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_get_calib_param
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_cali_temp
</UL>

<P><STRONG><a name="[472]"></a>sensor_i2c_write</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sensor_drv_api.o(i.sensor_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_mem_write
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_init
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_set_power_mode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_set_default_config
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_set_power_mode
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_set_default_config
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_sw_reset
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_gy_band_pass_set
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_block_data_update_set
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_set_default_config
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_set_pulse_width
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_set
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_get_comp_matrix
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_enable
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_work_mode
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_power_mode
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_odr
</UL>

<P><STRONG><a name="[40b]"></a>sensor_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sensor_hal.o(i.sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = sensor_init &rArr; sensor_brd_init &rArr; drv_baro_bosch_bmp280_init &rArr; drv_baro_bosch_bmp280_get_calib_param &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_brd_init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[2]"></a>soc_err_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, soc_impl.o(i.soc_err_proc))
<BR>[Address Reference Count : 1]<UL><LI> soc_impl.o(.data)
</UL>
<P><STRONG><a name="[36f]"></a>st7789_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st7789.o(i.st7789_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = st7789_init &rArr; st7789_run_cfg_script &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_run_cfg_script
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[45c]"></a>stm32_soc_init</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, soc_init.o(i.stm32_soc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = stm32_soc_init &rArr; BSP_GUI_init &rArr; GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GUI_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM17_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SAI2_Init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Smartcard_Init
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_i2c_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_task
</UL>

<P><STRONG><a name="[bc]"></a>straight_16</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crc16.o(i.straight_16))
<BR>[Address Reference Count : 1]<UL><LI> crc16.o(i.crc16ccitt)
</UL>
<P><STRONG><a name="[bd]"></a>straight_8</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crc16.o(i.straight_8))
<BR>[Address Reference Count : 1]<UL><LI> crc16.o(i.crc16ccitt)
</UL>
<P><STRONG><a name="[1ca]"></a>t0_send_command_recv_status</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, hal_smartcard_stm32l4.o(i.t0_send_command_recv_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = t0_send_command_recv_status &rArr; HAL_SMARTCARD_Transmit &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Transmit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Receive
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTransmit
</UL>

<P><STRONG><a name="[512]"></a>task_dyn_create</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, k_task.o(i.task_dyn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = task_dyn_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>

<P><STRONG><a name="[4fd]"></a>task_pri_change</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, k_task.o(i.task_pri_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
</UL>

<P><STRONG><a name="[515]"></a>task_resume</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, k_task.o(i.task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = task_resume &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_resume
</UL>

<P><STRONG><a name="[20e]"></a>test_se</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main_1.o(i.test_se))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = test_se &rArr; test_se2 &rArr; DeviceTransmit &rArr; t0_send_command_recv_status &rArr; HAL_SMARTCARD_Transmit &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceClose
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se2
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se1
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
</UL>

<P><STRONG><a name="[53b]"></a>test_se1</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, main_1.o(i.test_se1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = test_se1 &rArr; DeviceOpen &rArr; SC_AnswerReq &rArr; iso7816_get_atr &rArr; HAL_SMARTCARD_Receive &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOpen
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se
</UL>

<P><STRONG><a name="[53c]"></a>test_se2</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, main_1.o(i.test_se2))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = test_se2 &rArr; DeviceTransmit &rArr; t0_send_command_recv_status &rArr; HAL_SMARTCARD_Transmit &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceTransmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_se
</UL>

<P><STRONG><a name="[4f3]"></a>tick_list_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, k_tick.o(i.tick_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[516]"></a>tick_list_insert</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, k_tick.o(i.tick_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tick_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
</UL>

<P><STRONG><a name="[50f]"></a>tick_list_rm</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, k_tick.o(i.tick_list_rm))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[517]"></a>tick_list_update</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, k_tick.o(i.tick_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</UL>

<P><STRONG><a name="[53f]"></a>uData_get_report_pkg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, service_mgr.o(i.uData_get_report_pkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uData_get_report_pkg &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_report_publish
</UL>

<P><STRONG><a name="[405]"></a>uData_main</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, udata_main.o(i.uData_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = uData_main &rArr; abs_data_model_init &rArr; aos_timer_new_ext &rArr; krhino_timer_dyn_create &rArr; timer_create &rArr; krhino_timer_start &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_model_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_cali_init
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_mgr_init
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_init
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_framework_init
</UL>

<P><STRONG><a name="[b9]"></a>uData_report_demo</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, main_1.o(i.uData_report_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uData_report_demo &rArr; uData_report_publish &rArr; uData_get_report_pkg &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_report_publish
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.application_start)
</UL>
<P><STRONG><a name="[542]"></a>uData_report_publish</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, udata_interface.o(i.uData_report_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uData_report_publish &rArr; uData_get_report_pkg &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_get_report_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_report_demo
</UL>

<P><STRONG><a name="[541]"></a>uData_service_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, service_mgr.o(i.uData_service_init))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_main
</UL>

<P><STRONG><a name="[540]"></a>uData_service_mgr_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, service_mgr.o(i.uData_service_mgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = uData_service_mgr_init &rArr; aos_register_event_filter &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_event_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_main
</UL>

<P><STRONG><a name="[544]"></a>uData_service_subscribe</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, service_mgr.o(i.uData_service_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = uData_service_subscribe &rArr; abs_data_open &rArr; aos_timer_change &rArr; krhino_timer_change &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_find_service
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_subscribe
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_dispatcher
</UL>

<P><STRONG><a name="[545]"></a>uData_service_unsubscribe</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, service_mgr.o(i.uData_service_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uData_service_unsubscribe &rArr; abs_data_close &rArr; aos_timer_stop &rArr; krhino_timer_stop &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_close
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_find_service
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_dispatcher
</UL>

<P><STRONG><a name="[433]"></a>uData_subscribe</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, udata_interface.o(i.uData_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = uData_subscribe &rArr; uData_service_subscribe &rArr; abs_data_open &rArr; aos_timer_change &rArr; krhino_timer_change &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_start
</UL>

<P><STRONG><a name="[404]"></a>version_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, version.o(i.version_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = version_init
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_app_version
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_framework_init
</UL>

<P><STRONG><a name="[40a]"></a>vfs_device_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, device.o(i.vfs_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vfs_device_init &rArr; aos_register_driver &rArr; inode_reserve &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[409]"></a>vfs_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vfs.o(i.vfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vfs_init &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_init
</UL>

<P><STRONG><a name="[f3]"></a>wifi_cmd_task</STRONG> (Thumb, 284 bytes, Stack size 3032 bytes, atdemo.o(i.wifi_cmd_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 3216 + Unknown Stack Size
<LI>Call Chain = wifi_cmd_task &rArr; getc &rArr; fgetc &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_request
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_up_cmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[507]"></a>workqueue_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_workqueue.o(i.workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = workqueue_init &rArr; krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9b]"></a>LcdReadDataMultiple</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcdconf_flexcolor_template.o(i.LcdReadDataMultiple))
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_flexcolor_template.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[3f5]"></a>abs_data_create_obj_ctx</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, abs_data_model.o(i.abs_data_create_obj_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = abs_data_create_obj_ctx &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
</UL>

<P><STRONG><a name="[3ed]"></a>abs_data_get_obj_index</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, abs_data_model.o(i.abs_data_get_obj_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = abs_data_get_obj_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_read
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_close
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_cali_data_register
</UL>

<P><STRONG><a name="[b8]"></a>abs_data_timer_process</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, abs_data_model.o(i.abs_data_timer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = abs_data_timer_process &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abs_data_model.o(i.abs_data_model_init)
</UL>
<P><STRONG><a name="[546]"></a>uData_find_service</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, service_mgr.o(i.uData_find_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uData_find_service
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_unsubscribe
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_subscribe
</UL>

<P><STRONG><a name="[f6]"></a>uData_service_dispatcher</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, service_mgr.o(i.uData_service_dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = uData_service_dispatcher &rArr; uData_service_subscribe &rArr; abs_data_open &rArr; aos_timer_change &rArr; krhino_timer_change &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_read
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_ioctl
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_dev_enable
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_data_close
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_unsubscribe
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_subscribe
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_process
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> service_mgr.o(i.uData_service_mgr_init)
</UL>
<P><STRONG><a name="[543]"></a>uData_service_process</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, service_mgr.o(i.uData_service_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uData_service_process &rArr; aos_post_event &rArr; input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uData_service_dispatcher
</UL>

<P><STRONG><a name="[77]"></a>_DrawBkSimple</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, guidemo.o(i._DrawBkSimple))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _DrawBkSimple &rArr; GUI_Clear &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidemo.o(i.GUIDEMO_Main)
</UL>
<P><STRONG><a name="[200]"></a>_Main</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, guidemo.o(i._Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = _Main &rArr; GUIDEMO_Version_Info &rArr; GUIDEMO_GET_ALL_WIFI_SSID &rArr; at_cmd_request &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_EnableMemdev
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableMemdev
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Se
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Loopback
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Intro
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Main
</UL>

<P><STRONG><a name="[1e1]"></a>GUIDEMO_GET_ALL_WIFI_SSID</STRONG> (Thumb, 166 bytes, Stack size 2104 bytes, guidemo_uncalssified.o(i.GUIDEMO_GET_ALL_WIFI_SSID))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224 + Unknown Stack Size
<LI>Call Chain = GUIDEMO_GET_ALL_WIFI_SSID &rArr; at_cmd_request &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_request
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Version_Info
</UL>

<P><STRONG><a name="[1f3]"></a>close_G_sensor</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, guidemo_uncalssified.o(i.close_G_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = close_G_sensor &rArr; aos_close &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
</UL>

<P><STRONG><a name="[20c]"></a>close_other_sensor</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, guidemo_uncalssified.o(i.close_other_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = close_other_sensor &rArr; aos_close &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
</UL>

<P><STRONG><a name="[1ef]"></a>get_acc_data</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, guidemo_uncalssified.o(i.get_acc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_acc_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
</UL>

<P><STRONG><a name="[209]"></a>get_als_data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, guidemo_uncalssified.o(i.get_als_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_als_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
</UL>

<P><STRONG><a name="[206]"></a>get_baro_data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, guidemo_uncalssified.o(i.get_baro_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_baro_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
</UL>

<P><STRONG><a name="[1f2]"></a>get_gyro_data</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, guidemo_uncalssified.o(i.get_gyro_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_gyro_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
</UL>

<P><STRONG><a name="[208]"></a>get_humi_data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, guidemo_uncalssified.o(i.get_humi_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_humi_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
</UL>

<P><STRONG><a name="[1f1]"></a>get_mag_data</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, guidemo_uncalssified.o(i.get_mag_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_mag_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
</UL>

<P><STRONG><a name="[20a]"></a>get_ps_data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, guidemo_uncalssified.o(i.get_ps_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_ps_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
</UL>

<P><STRONG><a name="[207]"></a>get_temp_data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, guidemo_uncalssified.o(i.get_temp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_temp_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
</UL>

<P><STRONG><a name="[1ea]"></a>open_G_sensor</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, guidemo_uncalssified.o(i.open_G_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = open_G_sensor &rArr; aos_open &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_G_Sensors
</UL>

<P><STRONG><a name="[205]"></a>open_other_sensor</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, guidemo_uncalssified.o(i.open_other_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = open_other_sensor &rArr; aos_open &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_Other_Sensors
</UL>

<P><STRONG><a name="[342]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, irda.o(i.TIM_ForcedOC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_ForcedOC1Config &rArr; HAL_TIM_OC_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ir
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[4db]"></a>ir_dbg</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, irda.o(i.ir_dbg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ir_dbg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
</UL>

<P><STRONG><a name="[4dc]"></a>ir_delay</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, irda.o(i.ir_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ir_delay &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
</UL>

<P><STRONG><a name="[4e0]"></a>irda_match_lead</STRONG> (Thumb, 108 bytes, Stack size 28 bytes, irda.o(i.irda_match_lead))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = irda_match_lead
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irda_loopback_test
</UL>

<P><STRONG><a name="[4c1]"></a>get_upgresp</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, isd9160.o(i.get_upgresp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_upgresp &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_upgrade
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_payload
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_binsize
</UL>

<P><STRONG><a name="[4d1]"></a>handle_slprt</STRONG> (Thumb, 192 bytes, Stack size 160 bytes, isd9160.o(i.handle_slprt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = handle_slprt &rArr; isd9160_slprt_size &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_is_valid
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_recv
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_slprt_size
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isd9160_loop_once
</UL>

<P><STRONG><a name="[4d5]"></a>hint_percent</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, isd9160.o(i.hint_percent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hint_percent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_upgrade
</UL>

<P><STRONG><a name="[531]"></a>hton_4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, isd9160.o(i.hton_4))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_payload
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_binsize
</UL>

<P><STRONG><a name="[4d2]"></a>isd9160_slprt_size</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, isd9160.o(i.isd9160_slprt_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = isd9160_slprt_size &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_slprt
</UL>

<P><STRONG><a name="[530]"></a>request_binsize</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, isd9160.o(i.request_binsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = request_binsize &rArr; get_upgresp &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hton_4
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgresp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_upgrade
</UL>

<P><STRONG><a name="[532]"></a>request_payload</STRONG> (Thumb, 142 bytes, Stack size 168 bytes, isd9160.o(i.request_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = request_payload &rArr; get_upgresp &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hton_4
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgresp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_upgrade
</UL>

<P><STRONG><a name="[4d4]"></a>send_upgrade</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, isd9160.o(i.send_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = send_upgrade &rArr; request_payload &rArr; get_upgresp &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_payload
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_binsize
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hint_percent
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upgresp
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade
</UL>

<P><STRONG><a name="[4d3]"></a>upgf_init</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, isd9160.o(i.upgf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = upgf_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_upgrade
</UL>

<P><STRONG><a name="[352]"></a>Hal_Smartcard_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, soc_init.o(i.Hal_Smartcard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Hal_Smartcard_Init &rArr; HAL_SMARTCARD_Init &rArr; HAL_SMARTCARD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[372]"></a>MX_ADC3_Init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, soc_init.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[373]"></a>MX_SAI2_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, soc_init.o(i.MX_SAI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_SAI2_Init &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[374]"></a>MX_SPI1_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, soc_init.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[375]"></a>MX_TIM16_Init</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, soc_init.o(i.MX_TIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM16_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[377]"></a>MX_TIM17_Init</STRONG> (Thumb, 120 bytes, Stack size 80 bytes, soc_init.o(i.MX_TIM17_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM17_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[378]"></a>MX_TIM1_Init</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, soc_init.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_soc_init
</UL>

<P><STRONG><a name="[538]"></a>st7789_reset</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, st7789.o(i.st7789_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = st7789_reset &rArr; krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_low
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_high
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
</UL>

<P><STRONG><a name="[539]"></a>st7789_run_cfg_script</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, st7789.o(i.st7789_run_cfg_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = st7789_run_cfg_script &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
</UL>

<P><STRONG><a name="[444]"></a>st7789_write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, st7789.o(i.st7789_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_low
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_high
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_dispaly
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_run_cfg_script
</UL>

<P><STRONG><a name="[445]"></a>st7789_write_fb</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, st7789.o(i.st7789_write_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = st7789_write_fb &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_dispaly
</UL>

<P><STRONG><a name="[121]"></a>at_cip_recv_cfg_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_cip_recv_cfg_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_cip_recv_cfg_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>at_cip_send_raw_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_cip_send_raw_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_cip_send_raw_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>at_fota_start_func</STRONG> (Thumb, 246 bytes, Stack size 560 bytes, atdemo.o(i.at_fota_start_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = at_fota_start_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>at_get_ap_current_status_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_get_ap_current_status_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_get_ap_current_status_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>at_get_at_verion</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_get_at_verion))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_get_at_verion &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>at_get_at_verion_old</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_get_at_verion_old))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_get_at_verion_old &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>at_get_sta_current_status_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_get_sta_current_status_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_get_sta_current_status_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>at_reboot_func</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, atdemo.o(i.at_reboot_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_reboot_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>at_recover_factory_func</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, atdemo.o(i.at_recover_factory_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_recover_factory_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>at_refer_cip_recv_cfg_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_cip_recv_cfg_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_cip_recv_cfg_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>at_refer_flash_lock_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_flash_lock_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_flash_lock_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>at_refer_uart_echo_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_uart_echo_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_uart_echo_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>at_refer_uart_fomat_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_uart_fomat_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_uart_fomat_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>at_refer_uart_info_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_uart_info_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_uart_info_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>at_refer_wifi_ap_info_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_wifi_ap_info_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_wifi_ap_info_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>at_refer_wifi_ap_ip_mask_gate_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_wifi_ap_ip_mask_gate_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_wifi_ap_ip_mask_gate_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>at_refer_wifi_dhcp_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_wifi_dhcp_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_wifi_dhcp_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>at_refer_wifi_event_notification_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_wifi_event_notification_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_wifi_event_notification_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>at_refer_wifi_power_save_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_wifi_power_save_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_wifi_power_save_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>at_refer_wifi_scan_option_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_wifi_scan_option_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_wifi_scan_option_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>at_refer_wifi_sta_info_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_wifi_sta_info_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_wifi_sta_info_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>at_refer_wifi_sta_ip_mask_gate_dns_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_refer_wifi_sta_ip_mask_gate_dns_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_refer_wifi_sta_ip_mask_gate_dns_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>at_set_flash_lock_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_flash_lock_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_flash_lock_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>at_set_uart_echo_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_uart_echo_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_uart_echo_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>at_set_uart_fomat_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_uart_fomat_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_uart_fomat_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>at_set_uart_info_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_uart_info_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_uart_info_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>at_set_wifi_ap_info_start_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_wifi_ap_info_start_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_wifi_ap_info_start_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>at_set_wifi_ap_ip_mask_gate_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_wifi_ap_ip_mask_gate_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_wifi_ap_ip_mask_gate_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>at_set_wifi_dhcp_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_wifi_dhcp_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_wifi_dhcp_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>at_set_wifi_event_notification_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_wifi_event_notification_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_wifi_event_notification_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>at_set_wifi_power_save_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_wifi_power_save_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_wifi_power_save_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>at_set_wifi_scan_option_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_wifi_scan_option_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_wifi_scan_option_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>at_set_wifi_sta_info_start_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_wifi_sta_info_start_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_wifi_sta_info_start_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>at_set_wifi_sta_ip_mask_gate_dns_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_set_wifi_sta_ip_mask_gate_dns_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_set_wifi_sta_ip_mask_gate_dns_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>at_system_memory_free_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_system_memory_free_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_system_memory_free_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>at_system_run_time_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_system_run_time_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_system_run_time_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>at_test</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, atdemo.o(i.at_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = at_test &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>at_version</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_version &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>at_wifi_ap_quit_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_wifi_ap_quit_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_wifi_ap_quit_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>at_wifi_firmware_version_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_wifi_firmware_version_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_wifi_firmware_version_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>at_wifi_sta_quit_func</STRONG> (Thumb, 180 bytes, Stack size 168 bytes, atdemo.o(i.at_wifi_sta_quit_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = at_wifi_sta_quit_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>at_wl_mac_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_wl_mac_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_wl_mac_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>at_wl_scan_func</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, atdemo.o(i.at_wl_scan_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = at_wl_scan_func &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>handle_at</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, atdemo.o(i.handle_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = handle_at &rArr; hal_uart_recv &rArr; HAL_UART_Receive_IT_Buf_Queue_1byte &rArr; krhino_buf_queue_recv &rArr; ringbuf_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atdemo.o(.constdata)
</UL>
<P><STRONG><a name="[51c]"></a>look_up_cmd</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, atdemo.o(i.look_up_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = look_up_cmd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cmd_task
</UL>

<P><STRONG><a name="[39c]"></a>SavePicture</STRONG> (Thumb, 362 bytes, Stack size 128 bytes, camera_demo.o(i.SavePicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = SavePicture &rArr; GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDEMO_DrawBk
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_write
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_unlink
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_images_index
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_to_sd
</UL>

<P><STRONG><a name="[1b8]"></a>get_images_index</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, camera_demo.o(i.get_images_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = get_images_index &rArr; aos_stat &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_stat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraDEMO_Main
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePicture
</UL>

<P><STRONG><a name="[4c8]"></a>get_gpio_group</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hal_gpio_stm32l4.o(i.get_gpio_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_gpio_group
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_low
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_high
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_toggle
</UL>

<P><STRONG><a name="[4c4]"></a>get_gpio_pin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_gpio_stm32l4.o(i.get_gpio_pin))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_low
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_high
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_output_toggle
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_int_num
</UL>

<P><STRONG><a name="[4c6]"></a>gpio_para_transform</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hal_gpio_stm32l4.o(i.gpio_para_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_para_transform &rArr; gpio_has_priv &rArr; hal_gpio_output_low &rArr; get_gpio_group
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_has_priv
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_int_num
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[353]"></a>I2C1_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hal_i2c_stm32l4.o(i.I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = I2C1_Init &rArr; I2C1_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MspInit
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
</UL>

<P><STRONG><a name="[355]"></a>I2C1_MspInit</STRONG> (Thumb, 168 bytes, Stack size 176 bytes, hal_i2c_stm32l4.o(i.I2C1_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C1_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>

<P><STRONG><a name="[356]"></a>I2C2_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hal_i2c_stm32l4.o(i.I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = I2C2_Init &rArr; I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
</UL>

<P><STRONG><a name="[357]"></a>I2C2_MspInit</STRONG> (Thumb, 168 bytes, Stack size 184 bytes, hal_i2c_stm32l4.o(i.I2C2_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = I2C2_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[358]"></a>I2C3_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hal_i2c_stm32l4.o(i.I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = I2C3_Init &rArr; I2C3_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
</UL>

<P><STRONG><a name="[359]"></a>I2C3_MspInit</STRONG> (Thumb, 168 bytes, Stack size 176 bytes, hal_i2c_stm32l4.o(i.I2C3_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C3_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Init
</UL>

<P><STRONG><a name="[35a]"></a>I2C4_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hal_i2c_stm32l4.o(i.I2C4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = I2C4_Init &rArr; I2C4_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_init
</UL>

<P><STRONG><a name="[35b]"></a>I2C4_MspInit</STRONG> (Thumb, 172 bytes, Stack size 176 bytes, hal_i2c_stm32l4.o(i.I2C4_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C4_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Init
</UL>

<P><STRONG><a name="[382]"></a>iso7816_decode_atr</STRONG> (Thumb, 236 bytes, Stack size 28 bytes, hal_smartcard_stm32l4.o(i.iso7816_decode_atr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iso7816_decode_atr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_AnswerReq
</UL>

<P><STRONG><a name="[381]"></a>iso7816_get_atr</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, hal_smartcard_stm32l4.o(i.iso7816_get_atr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = iso7816_get_atr &rArr; HAL_SMARTCARD_Receive &rArr; SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Receive
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_AnswerReq
</UL>

<P><STRONG><a name="[51d]"></a>lpuart1_MspInit</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, hal_uart_stm32l4.o(i.lpuart1_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lpuart1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_init
</UL>

<P><STRONG><a name="[4cc]"></a>lpuart1_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, hal_uart_stm32l4.o(i.lpuart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = lpuart1_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_create
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stop_bits_transform
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_parity_transform
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_mode_transform
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_control_transform
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dataWidth_transform
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[547]"></a>uart2_MspInit</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, hal_uart_stm32l4.o(i.uart2_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[4cd]"></a>uart2_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hal_uart_stm32l4.o(i.uart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = uart2_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_create
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stop_bits_transform
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_parity_transform
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_mode_transform
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_control_transform
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dataWidth_transform
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[548]"></a>uart3_MspInit</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, hal_uart_stm32l4.o(i.uart3_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart3_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[4ce]"></a>uart3_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hal_uart_stm32l4.o(i.uart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = uart3_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_create
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stop_bits_transform
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_parity_transform
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_mode_transform
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_control_transform
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dataWidth_transform
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[549]"></a>uart4_MspInit</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, hal_uart_stm32l4.o(i.uart4_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
</UL>

<P><STRONG><a name="[4cf]"></a>uart4_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hal_uart_stm32l4.o(i.uart4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = uart4_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_create
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stop_bits_transform
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_parity_transform
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_mode_transform
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_control_transform
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dataWidth_transform
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[51e]"></a>uart_dataWidth_transform</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_uart_stm32l4.o(i.uart_dataWidth_transform))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_init
</UL>

<P><STRONG><a name="[521]"></a>uart_flow_control_transform</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_uart_stm32l4.o(i.uart_flow_control_transform))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_init
</UL>

<P><STRONG><a name="[522]"></a>uart_mode_transform</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_uart_stm32l4.o(i.uart_mode_transform))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_init
</UL>

<P><STRONG><a name="[51f]"></a>uart_parity_transform</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_uart_stm32l4.o(i.uart_parity_transform))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_init
</UL>

<P><STRONG><a name="[520]"></a>uart_stop_bits_transform</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_uart_stm32l4.o(i.uart_stop_bits_transform))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpuart1_init
</UL>

<P><STRONG><a name="[468]"></a>drv_acc_gyro_temp_st_lsm6dsl_validate_id</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_gyro_temp_st_lsm6dsl_validate_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drv_acc_gyro_temp_st_lsm6dsl_validate_id &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_init
</UL>

<P><STRONG><a name="[bf]"></a>drv_acc_st_lsm6dsl_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_acc_st_lsm6dsl_close &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[c2]"></a>drv_acc_st_lsm6dsl_ioctl</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_acc_st_lsm6dsl_ioctl &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[c3]"></a>drv_acc_st_lsm6dsl_irq_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_irq_handle))
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[be]"></a>drv_acc_st_lsm6dsl_open</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_acc_st_lsm6dsl_open &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_clear_new_data_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[c0]"></a>drv_acc_st_lsm6dsl_read</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = drv_acc_st_lsm6dsl_read &rArr; lsm6dsl_is_new_data_available &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_is_new_data_available
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_clear_new_data_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[46e]"></a>drv_acc_st_lsm6dsl_set_default_config</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_set_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drv_acc_st_lsm6dsl_set_default_config &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_init
</UL>

<P><STRONG><a name="[c1]"></a>drv_acc_st_lsm6dsl_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_acc_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[d1]"></a>drv_gyro_st_lsm6dsl_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_gyro_st_lsm6dsl_close &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[d4]"></a>drv_gyro_st_lsm6dsl_ioctl</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_gyro_st_lsm6dsl_ioctl &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[d5]"></a>drv_gyro_st_lsm6dsl_irq_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_irq_handle))
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[d0]"></a>drv_gyro_st_lsm6dsl_open</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_gyro_st_lsm6dsl_open &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_clear_new_data_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[d2]"></a>drv_gyro_st_lsm6dsl_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = drv_gyro_st_lsm6dsl_read &rArr; lsm6dsl_is_new_data_available &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_is_new_data_available
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsl_clear_new_data_available
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[d3]"></a>drv_gyro_st_lsm6dsl_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_acc_gyro_temp_st_lsm6dsl.o(i.drv_gyro_st_lsm6dsl_init)
</UL>
<P><STRONG><a name="[46c]"></a>lsm6dsl_block_data_update_set</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.lsm6dsl_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lsm6dsl_block_data_update_set &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_init
</UL>

<P><STRONG><a name="[470]"></a>lsm6dsl_clear_new_data_available</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.lsm6dsl_clear_new_data_available))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_read
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_open
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_open
</UL>

<P><STRONG><a name="[47f]"></a>lsm6dsl_gy_band_pass_set</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.lsm6dsl_gy_band_pass_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lsm6dsl_gy_band_pass_set &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
</UL>

<P><STRONG><a name="[471]"></a>lsm6dsl_is_new_data_available</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.lsm6dsl_is_new_data_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lsm6dsl_is_new_data_available &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_read
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_read
</UL>

<P><STRONG><a name="[46b]"></a>lsm6dsl_sw_reset</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, drv_acc_gyro_temp_st_lsm6dsl.o(i.lsm6dsl_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = lsm6dsl_sw_reset &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_gyro_st_lsm6dsl_init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_acc_st_lsm6dsl_init
</UL>

<P><STRONG><a name="[c5]"></a>drv_als_liteon_ltr553_close</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_als_liteon_ltr553_close &rArr; drv_als_liteon_ltr553_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_set_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[c8]"></a>drv_als_liteon_ltr553_ioctl</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_als_liteon_ltr553_ioctl &rArr; drv_als_liteon_ltr553_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_set_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[c9]"></a>drv_als_liteon_ltr553_irq_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_irq_handle))
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[c4]"></a>drv_als_liteon_ltr553_open</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_als_liteon_ltr553_open &rArr; drv_als_liteon_ltr553_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_set_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[c6]"></a>drv_als_liteon_ltr553_read</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = drv_als_liteon_ltr553_read &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[476]"></a>drv_als_liteon_ltr553_set_default_config</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_set_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drv_als_liteon_ltr553_set_default_config &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_init
</UL>

<P><STRONG><a name="[473]"></a>drv_als_liteon_ltr553_set_power_mode</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = drv_als_liteon_ltr553_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_open
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_ioctl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_close
</UL>

<P><STRONG><a name="[c7]"></a>drv_als_liteon_ltr553_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_als_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[475]"></a>drv_als_ps_liteon_ltr553_validate_id</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, drv_als_ps_liteon_ltr553.o(i.drv_als_ps_liteon_ltr553_validate_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = drv_als_ps_liteon_ltr553_validate_id &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_als_liteon_ltr553_init
</UL>

<P><STRONG><a name="[e3]"></a>drv_ps_liteon_ltr553_close</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_ps_liteon_ltr553_close &rArr; drv_ps_liteon_ltr553_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_set_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[e6]"></a>drv_ps_liteon_ltr553_ioctl</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_ps_liteon_ltr553_ioctl &rArr; drv_ps_liteon_ltr553_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_set_power_mode
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[e7]"></a>drv_ps_liteon_ltr553_irq_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_irq_handle))
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[e2]"></a>drv_ps_liteon_ltr553_open</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_ps_liteon_ltr553_open &rArr; drv_ps_liteon_ltr553_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_set_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[e4]"></a>drv_ps_liteon_ltr553_read</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = drv_ps_liteon_ltr553_read &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[48c]"></a>drv_ps_liteon_ltr553_set_default_config</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_set_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drv_ps_liteon_ltr553_set_default_config &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_init
</UL>

<P><STRONG><a name="[48a]"></a>drv_ps_liteon_ltr553_set_power_mode</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = drv_ps_liteon_ltr553_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_open
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_ioctl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_ps_liteon_ltr553_close
</UL>

<P><STRONG><a name="[e5]"></a>drv_ps_liteon_ltr553_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_als_ps_liteon_ltr553.o(i.drv_ps_liteon_ltr553_init)
</UL>
<P><STRONG><a name="[477]"></a>drv_baro_bosch_bmp280_cali_temp</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_cali_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = drv_baro_bosch_bmp280_cali_temp &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_read
</UL>

<P><STRONG><a name="[cb]"></a>drv_baro_bosch_bmp280_close</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = drv_baro_bosch_bmp280_close &rArr; drv_baro_bosch_bmp280_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
</UL>
<P><STRONG><a name="[47d]"></a>drv_baro_bosch_bmp280_compensate_baro</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_compensate_baro))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = drv_baro_bosch_bmp280_compensate_baro
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_read
</UL>

<P><STRONG><a name="[479]"></a>drv_baro_bosch_bmp280_get_calib_param</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_get_calib_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_baro_bosch_bmp280_get_calib_param &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_init
</UL>

<P><STRONG><a name="[ce]"></a>drv_baro_bosch_bmp280_ioctl</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_baro_bosch_bmp280_ioctl &rArr; drv_baro_bosch_bmp280_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_power_mode
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_odr
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
</UL>
<P><STRONG><a name="[cf]"></a>drv_baro_bosch_bmp280_irq_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_irq_handle))
<BR>[Address Reference Count : 1]<UL><LI> drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
</UL>
<P><STRONG><a name="[ca]"></a>drv_baro_bosch_bmp280_open</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_baro_bosch_bmp280_open &rArr; drv_baro_bosch_bmp280_set_work_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_work_mode
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_set_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
</UL>
<P><STRONG><a name="[cc]"></a>drv_baro_bosch_bmp280_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drv_baro_bosch_bmp280_read &rArr; drv_baro_bosch_bmp280_cali_temp &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_compensate_baro
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_cali_temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
</UL>
<P><STRONG><a name="[47b]"></a>drv_baro_bosch_bmp280_set_odr</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drv_baro_bosch_bmp280_set_odr &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_ioctl
</UL>

<P><STRONG><a name="[478]"></a>drv_baro_bosch_bmp280_set_power_mode</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drv_baro_bosch_bmp280_set_power_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_ioctl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_close
</UL>

<P><STRONG><a name="[47c]"></a>drv_baro_bosch_bmp280_set_work_mode</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_set_work_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = drv_baro_bosch_bmp280_set_work_mode &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_baro_bosch_bmp280_open
</UL>

<P><STRONG><a name="[cd]"></a>drv_baro_bosch_bmp280_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_baro_bosch_bmp280.o(i.drv_baro_bosch_bmp280_init)
</UL>
<P><STRONG><a name="[dd]"></a>drv_mag_memsic_mmc3680kj_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_mag_memsic_mmc3680kj_close &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
</UL>
<P><STRONG><a name="[e0]"></a>drv_mag_memsic_mmc3680kj_ioctl</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_mag_memsic_mmc3680kj_ioctl &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
</UL>
<P><STRONG><a name="[e1]"></a>drv_mag_memsic_mmc3680kj_irq_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_irq_handle))
<BR>[Address Reference Count : 1]<UL><LI> drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
</UL>
<P><STRONG><a name="[dc]"></a>drv_mag_memsic_mmc3680kj_open</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = drv_mag_memsic_mmc3680kj_open &rArr; mmc3680kj_set &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
</UL>
<P><STRONG><a name="[de]"></a>drv_mag_memsic_mmc3680kj_read</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = drv_mag_memsic_mmc3680kj_read &rArr; mmc3680kj_enable &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_set
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc3680kj_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
</UL>
<P><STRONG><a name="[df]"></a>drv_mag_memsic_mmc3680kj_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_mag_temp_memsic_mmc3680kj.o(i.drv_mag_memsic_mmc3680kj_init)
</UL>
<P><STRONG><a name="[484]"></a>mmc3680kj_check_otp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.mmc3680kj_check_otp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mmc3680kj_check_otp &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_init
</UL>

<P><STRONG><a name="[489]"></a>mmc3680kj_enable</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.mmc3680kj_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mmc3680kj_enable &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_read
</UL>

<P><STRONG><a name="[486]"></a>mmc3680kj_get_comp_matrix</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.mmc3680kj_get_comp_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mmc3680kj_get_comp_matrix &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_init
</UL>

<P><STRONG><a name="[488]"></a>mmc3680kj_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.mmc3680kj_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mmc3680kj_set &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_read
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_open
</UL>

<P><STRONG><a name="[487]"></a>mmc3680kj_set_pulse_width</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.mmc3680kj_set_pulse_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mmc3680kj_set_pulse_width &rArr; sensor_i2c_write &rArr; hal_i2c_mem_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_write
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_init
</UL>

<P><STRONG><a name="[485]"></a>mmc3680kj_validate_id</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, drv_mag_temp_memsic_mmc3680kj.o(i.mmc3680kj_validate_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mmc3680kj_validate_id &rArr; sensor_i2c_read &rArr; hal_i2c_mem_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_mag_memsic_mmc3680kj_init
</UL>

<P><STRONG><a name="[d7]"></a>drv_humi_sensirion_shtc1_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_humi_sensirion_shtc1_close &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[da]"></a>drv_humi_sensirion_shtc1_ioctl</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_humi_sensirion_shtc1_ioctl &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[db]"></a>drv_humi_sensirion_shtc1_irq_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_irq_handle))
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[d6]"></a>drv_humi_sensirion_shtc1_open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_humi_sensirion_shtc1_open &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[d8]"></a>drv_humi_sensirion_shtc1_read</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = drv_humi_sensirion_shtc1_read &rArr; drv_shtc1_update_data &rArr; drv_shtc1_read_raw_data &rArr; drv_shtc1_result_read &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_update_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[d9]"></a>drv_humi_sensirion_shtc1_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_humi_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[48d]"></a>drv_shtc1_cmd_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_shtc1_cmd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drv_shtc1_cmd_write &rArr; hal_i2c_master_send &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_humi_sensirion_shtc1_validate_id
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_read_raw_data
</UL>

<P><STRONG><a name="[48f]"></a>drv_shtc1_read_raw_data</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_shtc1_read_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = drv_shtc1_read_raw_data &rArr; drv_shtc1_result_read &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_result_read
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_cmd_write
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_update_data
</UL>

<P><STRONG><a name="[490]"></a>drv_shtc1_result_read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_shtc1_result_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = drv_shtc1_result_read &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_humi_sensirion_shtc1_validate_id
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_read_raw_data
</UL>

<P><STRONG><a name="[482]"></a>drv_shtc1_update_data</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_shtc1_update_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = drv_shtc1_update_data &rArr; drv_shtc1_read_raw_data &rArr; drv_shtc1_result_read &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_read_raw_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_read
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_read
</UL>

<P><STRONG><a name="[481]"></a>drv_temp_humi_sensirion_shtc1_validate_id</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_temp_humi_sensirion_shtc1_validate_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = drv_temp_humi_sensirion_shtc1_validate_id &rArr; drv_shtc1_result_read &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_result_read
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_cmd_write
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_temp_sensirion_shtc1_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_humi_sensirion_shtc1_init
</UL>

<P><STRONG><a name="[e9]"></a>drv_temp_sensirion_shtc1_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_temp_sensirion_shtc1_close &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[ec]"></a>drv_temp_sensirion_shtc1_ioctl</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_temp_sensirion_shtc1_ioctl &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[ed]"></a>drv_temp_sensirion_shtc1_irq_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_irq_handle))
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[e8]"></a>drv_temp_sensirion_shtc1_open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = drv_temp_sensirion_shtc1_open &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[ea]"></a>drv_temp_sensirion_shtc1_read</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = drv_temp_sensirion_shtc1_read &rArr; drv_shtc1_update_data &rArr; drv_shtc1_read_raw_data &rArr; drv_shtc1_result_read &rArr; hal_i2c_master_recv &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_shtc1_update_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[eb]"></a>drv_temp_sensirion_shtc1_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_temp_humi_sensirion_shtc1.o(i.drv_temp_sensirion_shtc1_init)
</UL>
<P><STRONG><a name="[4bd]"></a>find_selected_sensor</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sensor_hal.o(i.find_selected_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = find_selected_sensor &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_ioctl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_close
</UL>

<P><STRONG><a name="[124]"></a>sensor_close</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sensor_hal.o(i.sensor_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sensor_close &rArr; find_selected_sensor &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_selected_sensor
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_hal.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>sensor_ioctl</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sensor_hal.o(i.sensor_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sensor_ioctl &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_selected_sensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_hal.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>sensor_open</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sensor_hal.o(i.sensor_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_open &rArr; aos_now_ms &rArr; krhino_sys_time_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csp_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_selected_sensor
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_hal.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>sensor_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sensor_hal.o(i.sensor_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sensor_read &rArr; find_selected_sensor &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_selected_sensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_hal.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>sensor_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensor_hal.o(i.sensor_write))
<BR>[Address Reference Count : 1]<UL><LI> sensor_hal.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>SDMMC_ioctl</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, diskio.o(i.SDMMC_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SDMMC_ioctl &rArr; SDMMC_status &rArr; hal_sd_stat_get &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_info_get
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_ioctl
</UL>

<P><STRONG><a name="[393]"></a>SDMMC_status</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(i.SDMMC_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SDMMC_status &rArr; hal_sd_stat_get &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sd_stat_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ioctl
</UL>

<P><STRONG><a name="[129]"></a>fatfs_close</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fatfs.o(i.fatfs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = fatfs_close &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>fatfs_closedir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fatfs.o(i.fatfs_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = fatfs_closedir &rArr; f_closedir &rArr; validate &rArr; ff_disk_status &rArr; SDMMC_status &rArr; hal_sd_stat_get &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[4b4]"></a>fatfs_dev_register</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, fatfs.o(i.fatfs_dev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = fatfs_dev_register &rArr; f_mkfs &rArr; ff_disk_initialize &rArr; hal_sd_init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_register_fs
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk_index
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_register
</UL>

<P><STRONG><a name="[12c]"></a>fatfs_lseek</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fatfs.o(i.fatfs_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = fatfs_lseek &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>fatfs_mkdir</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fatfs.o(i.fatfs_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = fatfs_mkdir &rArr; f_mkdir &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>fatfs_open</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, fatfs.o(i.fatfs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = fatfs_open &rArr; f_open &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>fatfs_opendir</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fatfs.o(i.fatfs_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = fatfs_opendir &rArr; f_opendir &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>fatfs_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fatfs.o(i.fatfs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = fatfs_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>fatfs_readdir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fatfs.o(i.fatfs_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = fatfs_readdir &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>fatfs_rename</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fatfs.o(i.fatfs_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = fatfs_rename &rArr; f_rename &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>fatfs_stat</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, fatfs.o(i.fatfs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = fatfs_stat &rArr; f_stat &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>fatfs_sync</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fatfs.o(i.fatfs_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = fatfs_sync &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>fatfs_unlink</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fatfs.o(i.fatfs_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = fatfs_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_relative_path
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>fatfs_write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fatfs.o(i.fatfs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = fatfs_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfs.o(.constdata)
</UL>
<P><STRONG><a name="[4b5]"></a>get_disk_index</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fatfs.o(i.get_disk_index))
<BR><BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_dev_register
</UL>

<P><STRONG><a name="[4b6]"></a>translate_relative_path</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, fatfs.o(i.translate_relative_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = translate_relative_path &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_unlink
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_stat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_rename
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_opendir
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_open
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_mkdir
</UL>

<P><STRONG><a name="[446]"></a>check_fs</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[460]"></a>clst2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[453]"></a>create_chain</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[456]"></a>create_name</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[45e]"></a>dir_clear</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dir_clear &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[462]"></a>dir_next</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[463]"></a>dir_read</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[464]"></a>dir_register</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[467]"></a>dir_remove</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = dir_remove &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[465]"></a>dir_sdi</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[49d]"></a>find_volume</STRONG> (Thumb, 590 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = find_volume &rArr; ff_disk_initialize &rArr; hal_sd_init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_status
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[49e]"></a>follow_path</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[454]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[4af]"></a>get_fileinfo</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_fileinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[4a4]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[4aa]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4ab]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[448]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[449]"></a>mem_cmp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[466]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[457]"></a>mem_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[447]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[455]"></a>put_fat</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[4a1]"></a>remove_chain</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[4a0]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[49f]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[4a7]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[4a2]"></a>sync_fs</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = sync_fs &rArr; sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_write
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[45f]"></a>sync_window</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = sync_window &rArr; ff_disk_write &rArr; hal_sd_blks_write &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[498]"></a>validate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = validate &rArr; ff_disk_status &rArr; SDMMC_status &rArr; hal_sd_stat_get &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[43a]"></a>buf_queue_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, k_buf_queue.o(i.buf_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_create
</UL>

<P><STRONG><a name="[43e]"></a>buf_queue_send</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, k_buf_queue.o(i.buf_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = buf_queue_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_head_push
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>

<P><STRONG><a name="[43f]"></a>is_klist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_buf_queue.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[438]"></a>bitmap_search</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, k_mm.o(i.bitmap_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_find_first_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[4bc]"></a>find_last_bit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, k_mm.o(i.find_last_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_last_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_find_first_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[4bf]"></a>get_block</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, k_mm.o(i.get_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_block &rArr; krhino_bitmap_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_bitmap_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>

<P><STRONG><a name="[4eb]"></a>init_mm_region</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, k_mm.o(i.init_mm_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>

<P><STRONG><a name="[4d9]"></a>insert_block</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, k_mm.o(i.insert_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = insert_block &rArr; krhino_bitmap_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_bitmap_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[4e6]"></a>k_mm_smallblk_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, k_mm.o(i.k_mm_smallblk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>

<P><STRONG><a name="[4c0]"></a>krhino_bitmap_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_mm.o(i.krhino_bitmap_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = krhino_bitmap_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block
</UL>

<P><STRONG><a name="[4da]"></a>krhino_bitmap_set</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_mm.o(i.krhino_bitmap_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = krhino_bitmap_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_block
</UL>

<P><STRONG><a name="[439]"></a>krhino_find_first_bit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, k_mm.o(i.krhino_find_first_bit))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last_bit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_search
</UL>

<P><STRONG><a name="[4fc]"></a>is_klist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_mutex.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[4fa]"></a>mutex_release</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, k_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
</UL>

<P><STRONG><a name="[527]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_pend.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[529]"></a>klist_rm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_pend.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
</UL>

<P><STRONG><a name="[526]"></a>pend_list_add</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, k_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[523]"></a>is_klist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_queue.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_send
</UL>

<P><STRONG><a name="[4ff]"></a>msg_send</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, k_queue.o(i.msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_head_push
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_back_send
</UL>

<P><STRONG><a name="[501]"></a>queue_create</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, k_queue.o(i.queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_create
</UL>

<P><STRONG><a name="[534]"></a>ringbuf_headlen_compress</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, k_ringbuf.o(i.ringbuf_headlen_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ringbuf_headlen_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_head_push
</UL>

<P><STRONG><a name="[52d]"></a>is_ready_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_sched.o(i.is_ready_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[52f]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_sched.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[52e]"></a>ready_list_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, k_sched.o(i.ready_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[504]"></a>is_klist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_sem.o(i.is_klist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
</UL>

<P><STRONG><a name="[503]"></a>sem_create</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, k_sem.o(i.sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
</UL>

<P><STRONG><a name="[505]"></a>sem_give</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, k_sem.o(i.sem_give))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>

<P><STRONG><a name="[513]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_task.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[510]"></a>klist_rm</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_task.o(i.klist_rm))
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[50a]"></a>task_create</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, k_task.o(i.task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stack_init
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>

<P><STRONG><a name="[50d]"></a>task_mutex_free</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, k_task.o(i.task_mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = task_mutex_free &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[44a]"></a>cmd_proc</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, k_timer.o(i.cmd_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
</UL>

<P><STRONG><a name="[53d]"></a>timer_cb_proc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, k_timer.o(i.timer_cb_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_cb_proc &rArr; timer_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[53e]"></a>timer_cmd_proc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, k_timer.o(i.timer_cmd_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = timer_cmd_proc &rArr; cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[518]"></a>timer_create</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, k_timer.o(i.timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = timer_create &rArr; krhino_timer_start &rArr; krhino_queue_back_send &rArr; msg_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
</UL>

<P><STRONG><a name="[44b]"></a>timer_list_pri_insert</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, k_timer.o(i.timer_list_pri_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>

<P><STRONG><a name="[44c]"></a>timer_list_rm</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, k_timer.o(i.timer_list_rm))
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>

<P><STRONG><a name="[f1]"></a>timer_task</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, k_timer.o(i.timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = timer_task &rArr; timer_cmd_proc &rArr; cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_queue_recv
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_timer.o(i.ktimer_init)
</UL>
<P><STRONG><a name="[51b]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_workqueue.o(i.klist_insert))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[54c]"></a>klist_rm_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_workqueue.o(i.klist_rm_init))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
</UL>

<P><STRONG><a name="[f0]"></a>worker_task</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, k_workqueue.o(i.worker_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = worker_task &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; ready_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm_init
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_workqueue.o(i.krhino_workqueue_create)
</UL>
<P><STRONG><a name="[51a]"></a>workqueue_is_exist</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, k_workqueue.o(i.workqueue_is_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = workqueue_is_exist
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[3e3]"></a>_event_write</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, device.o(i._event_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _event_write &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_ioctl
</UL>

<P><STRONG><a name="[495]"></a>dlist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, device.o(i.dlist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_close
</UL>

<P><STRONG><a name="[136]"></a>event_close</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, device.o(i.event_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = event_close &rArr; aos_mutex_free &rArr; krhino_mutex_del &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_empty
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>event_ioctl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, device.o(i.event_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = event_ioctl &rArr; _event_write &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>event_open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, device.o(i.event_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = event_open &rArr; aos_mutex_new &rArr; aos_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; bitmap_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>event_poll</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, device.o(i.event_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = event_poll &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>event_read</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, device.o(i.event_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = event_read &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>event_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(i.event_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = event_write &rArr; _event_write &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata)
</UL>
<P><STRONG><a name="[401]"></a>del_file</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfs.o(i.del_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = del_file
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_unlink
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_opendir
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mkdir
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_closedir
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_stat
</UL>

<P><STRONG><a name="[400]"></a>get_file</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vfs.o(i.get_file))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_read
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sync
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_closedir
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_poll
</UL>

<P><STRONG><a name="[415]"></a>new_file</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, vfs.o(i.new_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = new_file
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inode_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_open
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_unlink
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_opendir
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mkdir
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_stat
</UL>

<P><STRONG><a name="[41d]"></a>pre_poll</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, vfs.o(i.pre_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pre_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_poll
</UL>

<P><STRONG><a name="[f5]"></a>vfs_poll_notify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vfs.o(i.vfs_poll_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = vfs_poll_notify &rArr; aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vfs.o(i.pre_poll)
</UL>
<P><STRONG><a name="[420]"></a>input_add_event</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, local_event.o(i.input_add_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = input_add_event &rArr; aos_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_post_event
</UL>

<P><STRONG><a name="[40f]"></a>dlist_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, yloop.o(i.dlist_empty))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
</UL>

<P><STRONG><a name="[40e]"></a>get_context</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, yloop.o(i.get_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = get_context &rArr; aos_task_setspecific &rArr; krhino_task_info_set
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_loop_run
</UL>

<P><STRONG><a name="[2b4]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[2b2]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[2b3]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[2b5]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[2de]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[8b]"></a>DCMI_DMAError</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l4xx_hal_dcmi.o(i.DCMI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l4xx_hal_dcmi.o(i.HAL_DCMI_IRQHandler)
<LI> stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[8d]"></a>DCMI_DMAHalfXferCplt</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32l4xx_hal_dcmi.o(i.DCMI_DMAHalfXferCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCMI_DMAHalfXferCplt &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[8c]"></a>DCMI_DMAXferCplt</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32l4xx_hal_dcmi.o(i.DCMI_DMAXferCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DCMI_DMAXferCplt &rArr; HAL_DCMI_FrameEventCallback &rArr; GC0329_CAMERA_FrameEventCallback &rArr; camera_dispaly &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_FrameEventCallback
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_dcmi.o(i.HAL_DCMI_Start_DMA)
</UL>
<P><STRONG><a name="[1c2]"></a>DCMI_TransferSize</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, stm32l4xx_hal_dcmi.o(i.DCMI_TransferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DCMI_TransferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DCMI_Start_DMA
</UL>

<P><STRONG><a name="[2c8]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32l4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[35d]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[35c]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
</UL>

<P><STRONG><a name="[2d6]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[2d8]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[2d0]"></a>I2C_TransferConfig</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, stm32l4xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[2cf]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[2d1]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[2d2]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[2d4]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[2e9]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[2e4]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[2e5]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[8e]"></a>SAI_DMAAbort</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.SAI_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SAI_DMAAbort &rArr; SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_sai.o(i.HAL_SAI_IRQHandler)
</UL>
<P><STRONG><a name="[2eb]"></a>SAI_Disable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_sai.o(i.SAI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMAAbort
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Abort
</UL>

<P><STRONG><a name="[90]"></a>SD_DMARxAbort</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_sd.o(i.SD_DMARxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_DMARxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[8f]"></a>SD_DMATxAbort</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_sd.o(i.SD_DMATxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[396]"></a>SD_FindSCR</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, stm32l4xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[304]"></a>SD_InitCard</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, stm32l4xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[303]"></a>SD_PowerON</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32l4xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2f2]"></a>SD_WideBus_Disable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l4xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[2f1]"></a>SD_WideBus_Enable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l4xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[316]"></a>SMARTCARD_AdvFeatureConfig</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, stm32l4xx_hal_smartcard.o(i.SMARTCARD_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Init
</UL>

<P><STRONG><a name="[91]"></a>SMARTCARD_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_smartcard.o(i.SMARTCARD_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMARTCARD_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_smartcard.o(i.HAL_SMARTCARD_IRQHandler)
</UL>
<P><STRONG><a name="[30e]"></a>SMARTCARD_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_smartcard.o(i.SMARTCARD_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_IRQHandler
</UL>

<P><STRONG><a name="[312]"></a>SMARTCARD_EndTransmit_IT</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32l4xx_hal_smartcard.o(i.SMARTCARD_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMARTCARD_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_IRQHandler
</UL>

<P><STRONG><a name="[310]"></a>SMARTCARD_EndTxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_smartcard.o(i.SMARTCARD_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_IRQHandler
</UL>

<P><STRONG><a name="[315]"></a>SMARTCARD_SetConfig</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, stm32l4xx_hal_smartcard.o(i.SMARTCARD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SMARTCARD_SetConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Init
</UL>

<P><STRONG><a name="[317]"></a>SMARTCARD_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32l4xx_hal_smartcard.o(i.SMARTCARD_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SMARTCARD_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Transmit
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SMARTCARD_Receive
</UL>

<P><STRONG><a name="[31d]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[39a]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[39b]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[325]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[338]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, stm32l4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[33a]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32l4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[33b]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[33c]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[33d]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[345]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_SlaveTimer_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_SlaveTimer_SetConfig &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization
</UL>

<P><STRONG><a name="[323]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[324]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[32a]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[92]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[347]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT_Buf_Queue_1byte)
</UL>
<P><STRONG><a name="[93]"></a>UART_RxISR_8BIT_Buf_Queue</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT_Buf_Queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = UART_RxISR_8BIT_Buf_Queue &rArr; krhino_buf_queue_send &rArr; buf_queue_send &rArr; ringbuf_push &rArr; ringbuf_headlen_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT_Buf_Queue_1byte)
</UL>
<P><STRONG><a name="[96]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[95]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[385]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 274 bytes, Stack size 12 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[38d]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[387]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[391]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[226]"></a>_AddFreeMemory</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, gui_alloc.o(i._AddFreeMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[223]"></a>_Alloc</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, gui_alloc.o(i._Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _Alloc &rArr;  _InitOnce (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>

<P><STRONG><a name="[3d5]"></a>_EnlargeBlocks</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, gui_alloc.o(i._EnlargeBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[227]"></a>_InitOnce</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, gui_alloc.o(i._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[229]"></a>_RemoveFreeBlock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gui_alloc.o(i._RemoveFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RemoveFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[228]"></a>_RemoveHoles</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, gui_alloc.o(i._RemoveHoles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _RemoveHoles &rArr; _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>

<P><STRONG><a name="[86]"></a>_OnExit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gui_core.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(i.GUI_Init)
</UL>
<P><STRONG><a name="[88]"></a>_OnExit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gui_multibuf.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_multibuf.o(i.GUI_MULTIBUF_Config)
</UL>
<P><STRONG><a name="[23e]"></a>_DispFloatFix</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gui_valf.o(i._DispFloatFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloatFix
</UL>

<P><STRONG><a name="[140]"></a>_Color2IndexBulk</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, guicc_m565.o(i._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>_Color2Index_M565</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, guicc_m565.o(i._Color2Index_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m565.o(i._GetIndexMask_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>_Index2ColorBulk</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, guicc_m565.o(i._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>_DrawBitmap</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, guidrv_flexcolor.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>_DrawHLine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guidrv_flexcolor.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>_DrawVLine</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, guidrv_flexcolor.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DrawVLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>_FillRect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, guidrv_flexcolor.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>_GetDevData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>_GetDevFunc</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>_GetDevFunc_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, guidrv_flexcolor.o(i._GetDevFunc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _GetDevFunc_Init &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a7]"></a>_GetDevFunc_Off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guidrv_flexcolor.o(i._GetDevFunc_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _GetDevFunc_Off &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a3]"></a>_GetDevFunc_On</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guidrv_flexcolor.o(i._GetDevFunc_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _GetDevFunc_On &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[ac]"></a>_GetDevFunc_SetRect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._GetDevFunc_SetRect))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._GetDevFunc_SetRectOutside)
</UL>
<P><STRONG><a name="[a9]"></a>_GetDevFunc_SetRectOutside</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, guidrv_flexcolor.o(i._GetDevFunc_SetRectOutside))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetDevFunc_SetRectOutside
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a4]"></a>_GetDevFunc_SetSize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, guidrv_flexcolor.o(i._GetDevFunc_SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _GetDevFunc_SetSize &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[a5]"></a>_GetDevFunc_SetVSize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, guidrv_flexcolor.o(i._GetDevFunc_SetVSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _GetDevFunc_SetVSize &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[14b]"></a>_GetDevProp</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>_GetPixelIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._GetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>_GetRect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._GetRect))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>_Log2PhysX_X0Y0S0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysX_X0Y0S0))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>_Log2PhysX_X0Y0S1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysX_X0Y0S1))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>_Log2PhysX_X0Y1S0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysX_X0Y1S0))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>_Log2PhysX_X0Y1S1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysX_X0Y1S1))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>_Log2PhysX_X1Y0S0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysX_X1Y0S0))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>_Log2PhysX_X1Y0S1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysX_X1Y0S1))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>_Log2PhysX_X1Y1S0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysX_X1Y1S0))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>_Log2PhysX_X1Y1S1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysX_X1Y1S1))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>_Log2PhysY_X0Y0S0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysY_X0Y0S0))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>_Log2PhysY_X0Y0S1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysY_X0Y0S1))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>_Log2PhysY_X0Y1S0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysY_X0Y1S0))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>_Log2PhysY_X0Y1S1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysY_X0Y1S1))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>_Log2PhysY_X1Y0S0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysY_X1Y0S0))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>_Log2PhysY_X1Y0S1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysY_X1Y0S1))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>_Log2PhysY_X1Y1S0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysY_X1Y1S0))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>_Log2PhysY_X1Y1S1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._Log2PhysY_X1Y1S1))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>_ReadPixelCust_16bpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._ReadPixelCust_16bpp))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._SetDevFunc)
</UL>
<P><STRONG><a name="[ae]"></a>_ReadPixelCust_18bpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._ReadPixelCust_18bpp))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._SetDevFunc)
</UL>
<P><STRONG><a name="[b0]"></a>_ReadRectCust_16bpp</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, guidrv_flexcolor.o(i._ReadRectCust_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ReadRectCust_16bpp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._SetDevFunc)
</UL>
<P><STRONG><a name="[ad]"></a>_ReadRectCust_18bpp</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, guidrv_flexcolor.o(i._ReadRectCust_18bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ReadRectCust_18bpp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._SetDevFunc)
</UL>
<P><STRONG><a name="[a8]"></a>_SetDevFunc</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, guidrv_flexcolor.o(i._SetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _SetDevFunc &rArr; GUIDRV_FlexColor__InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDRV_FlexColor__InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[149]"></a>_SetOrg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, guidrv_flexcolor.o(i._SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetOrg &rArr; LCD_X_DisplayDriver &rArr; st7789_init &rArr; st7789_run_cfg_script &rArr; st7789_write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>_SetPixelIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_flexcolor.o(i._SetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>_XorPixel</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, guidrv_flexcolor.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _XorPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>_DrawBitmap</STRONG> (Thumb, 1332 bytes, Stack size 128 bytes, guidrv_flexcolor_16bpp_c0b8.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _DrawBitmap &rArr; _WriteDataMP
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteDataMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
</UL>
<P><STRONG><a name="[7f]"></a>_FillRect</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, guidrv_flexcolor_16bpp_c0b8.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _FillRect &rArr; _WriteDataMP
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteDataMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
</UL>
<P><STRONG><a name="[82]"></a>_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidrv_flexcolor_16bpp_c0b8.o(i._ReadData))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
</UL>
<P><STRONG><a name="[83]"></a>_WriteData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guidrv_flexcolor_16bpp_c0b8.o(i._WriteData))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_16bpp_c0b8.o(i.GUIDRV_FlexColor_SetMode16bppC0B8)
</UL>
<P><STRONG><a name="[3da]"></a>_WriteDataMP</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, guidrv_flexcolor_16bpp_c0b8.o(i._WriteDataMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _WriteDataMP
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7]"></a>_ReadPixel_16bpp_B16_I</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, guidrv_flexcolor_func66709.o(i._ReadPixel_16bpp_B16_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ReadPixel_16bpp_B16_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>_ReadPixel_16bpp_B8</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidrv_flexcolor_func66709.o(i._ReadPixel_16bpp_B8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ReadPixel_16bpp_B8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
</UL>
<P><STRONG><a name="[8]"></a>_ReadRect_16bpp_B16_I</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, guidrv_flexcolor_func66709.o(i._ReadRect_16bpp_B16_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ReadRect_16bpp_B16_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>_ReadRect_16bpp_B8</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, guidrv_flexcolor_func66709.o(i._ReadRect_16bpp_B8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ReadRect_16bpp_B8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
</UL>
<P><STRONG><a name="[7d]"></a>_SetInterface</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, guidrv_flexcolor_func66709.o(i._SetInterface))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
</UL>
<P><STRONG><a name="[7a]"></a>_SetOrientation</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidrv_flexcolor_func66709.o(i._SetOrientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetOrientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
</UL>
<P><STRONG><a name="[78]"></a>_SetPhysRAMAddr</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, guidrv_flexcolor_func66709.o(i._SetPhysRAMAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetPhysRAMAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
</UL>
<P><STRONG><a name="[79]"></a>_SetRect</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, guidrv_flexcolor_func66709.o(i._SetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _SetRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i.GUIDRV_FlexColor_SetFunc66709)
</UL>
<P><STRONG><a name="[b1]"></a>_SetReg_B16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor_func66709.o(i._SetReg_B16))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i._SetInterface)
</UL>
<P><STRONG><a name="[b3]"></a>_SetReg_B8</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, guidrv_flexcolor_func66709.o(i._SetReg_B8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetReg_B8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i._SetInterface)
</UL>
<P><STRONG><a name="[b2]"></a>_WritePara_B16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_flexcolor_func66709.o(i._WritePara_B16))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i._SetInterface)
</UL>
<P><STRONG><a name="[b4]"></a>_WritePara_B8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_flexcolor_func66709.o(i._WritePara_B8))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_flexcolor_func66709.o(i._SetInterface)
</UL>
<P><STRONG><a name="[3bb]"></a>WM__PaintWinAndOverlays</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, wm.o(i.WM__PaintWinAndOverlays))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
</UL>

<P><STRONG><a name="[3b6]"></a>_DeleteAllChildren</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm.o(i._DeleteAllChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _DeleteAllChildren &rArr;  WM_DeleteWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[3d0]"></a>_Findx0</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, wm.o(i._Findx0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>

<P><STRONG><a name="[3d1]"></a>_Findx1</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, wm.o(i._Findx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _Findx1 &rArr;  _Findx1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>

<P><STRONG><a name="[3cf]"></a>_Findy1</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, wm.o(i._Findy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[3c4]"></a>_Invalidate1Abs</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, wm.o(i._Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[a0]"></a>_OnExit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wm.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[3d4]"></a>_PaintTransChildren</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, wm.o(i._PaintTransChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[9f]"></a>_cbBackWin</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, wm.o(i._cbBackWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _cbBackWin &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[9e]"></a>_cbPaintMemDev</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm.o(i._cbPaintMemDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _cbPaintMemDev &rArr; WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Exec)
</UL>
<P><STRONG><a name="[3bd]"></a>_GetDialogItem</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, wm_lib.o(i._GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[8a]"></a>_OnExit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gui__alpha.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(i.GUI__GetAlphaBuffer)
</UL>
<P><STRONG><a name="[d]"></a>_Log2VisBuffered</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_charline.o(i._Log2VisBuffered))
<BR>[Address Reference Count : 1]<UL><LI> gui_charline.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_task.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_task.o(i.GUITASK_Init)
</UL>
<P><STRONG><a name="[168]"></a>_CalcSizeOfChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>_Encode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._Encode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>_GetCharCode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>_GetCharSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>_Color2IndexBulk</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, guicc_8888.o(i._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>_Color2Index_8888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_8888.o(i._Color2Index_8888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>_GetIndexMask_8888</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_8888.o(i._GetIndexMask_8888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>_Index2ColorBulk</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, guicc_8888.o(i._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>_SetBkColor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i._SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetBkColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>_SetColor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>_SetDrawMode</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lcd.o(i._SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _SetDrawMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>_OnExit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_color.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_color.o(i.LCD_InitColors)
</UL>
<P><STRONG><a name="[171]"></a>_DrawBitmap</STRONG> (Thumb, 2106 bytes, Stack size 136 bytes, guidev_16.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _DrawBitmap &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidev_16.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>_DrawVLine</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, guidev_16.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>_FillRect</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, guidev_16.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>_GetDevData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>_GetDevFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>_GetDevProp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>_GetPixelIndex</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_16.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>_GetRect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidev_16.o(i._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>_SetOrg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_16.o(i._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>_SetPixelIndex</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, guidev_16.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>_XorPixel</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, guidev_16.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _XorPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>GUI_USAGE_BM_AddHLine</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_USAGE_BM_AddHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>GUI_USAGE_BM_AddPixel</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel))
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>GUI_USAGE_BM_Clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>GUI_USAGE_BM_GetNextDirty</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_USAGE_BM_GetNextDirty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>_GUI_USAGE_BM_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidev_usagebm.o(i._GUI_USAGE_BM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _GUI_USAGE_BM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; krhino_mutex_lock &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[3d3]"></a>_MoveDescendents</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, wm_move.o(i._MoveDescendents))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[182]"></a>_Color2Index_0</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, guicc_0.o(i._Color2Index_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2Index_0 &rArr; LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CalcColorDist
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>_GetIndexMask_0</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, guicc_0.o(i._GetIndexMask_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetIndexMask_0 &rArr; LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>_Index2Color_0</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guicc_0.o(i._Index2Color_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Index2Color_0 &rArr; LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[293]"></a>LCD_ReadRectEx</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, lcd_readrect.o(i.LCD_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
</UL>

<P><STRONG><a name="[185]"></a>_DrawBitmap</STRONG> (Thumb, 2076 bytes, Stack size 136 bytes, guidev_32.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _DrawBitmap &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidev_32.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>_DrawVLine</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, guidev_32.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>_FillRect</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, guidev_32.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>_GetDevData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>_GetDevFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>_GetDevProp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>_GetPixelIndex</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_32.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>_GetRect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidev_32.o(i._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_32.o(i._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>_SetPixelIndex</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, guidev_32.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>_XorPixel</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, guidev_32.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _XorPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[3e8]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3de]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[3ea]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b6]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[b7]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
